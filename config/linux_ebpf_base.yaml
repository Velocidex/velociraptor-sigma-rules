Name: Linux.Sigma.EBPFBase
ImportConfigs:
  - config/base_doc.yaml

Description: |
  # Linux Base eBPF Model

  This model is designed to follow eBPF events on Linux.

  Events are provided by various eBPF functions in the `watch_ebpf()`
  plugin. These events can provide security critical information which
  can be detected using Sigma Rules.

Preamble: |
  name: Linux.Sigma.EBPFBase
  description: |
    This artifact builds the basic set of log sources and field
    mappings used for Event driven Sigma rules on Linux.

    This model uses Velociraptor's EBPF engine which is based on
    tracee https://github.com/aquasecurity/tracee.

    This model is compatible with the Sigma HQ rules and it is used by
    the artifact `Linux.EBPF.Monitoring`.

    This artifact was built on {{ .Time }}

  type: CLIENT_EVENT

  parameters:
    - name: Debug
      type: bool
      description: Enable full debug trace

    - name: RuleLevel
      type: choices
      default: All
      choices:
        - "Critical"
        - "Critical and High"
        - "Critical, High, and Medium"
        - "All"

    - name: RuleStatus
      type: choices
      default: All Rules
      choices:
        - Stable
        - Stable and Experimental
        - Stable and Test
        - All Rules

    - name: RuleTitleFilter
      type: regex
      default: .
      description: Use this to filter only some rules to match

    - name: RuleExclusions
      type: csv
      description: |
        Some rules in the Hayabusa set are extremely noisy, so they
        are disabled by default.
      default: |
        RuleTitleRegex,Reason
        noisy,All rules marked noisy should be disabled by default.

    - name: SigmaRules
      description: If provided we use these rules instead of the built in set.

    - name: NTFS_CACHE_TIME
      type: int
      description: How often to flush the NTFS cache. (Default is 10 Min).
      default: "600"

    - name: EVTX_FREQUENCY
      type: int
      default: 60
      description: |
        How often in seconds to check for event log changes. Lower
        number means more real time detection but potentially higher
        CPU utilization.

ExportTemplate: |
  export: |
    -- Add some defaults
    LET X = scope()
    LET RuleLevel <= X.RuleLevel || "All"
    LET RuleStatus <= X.RuleStatus || "All Rules"
    LET RuleTitleFilter <= X.RuleTitleFilter || "."
    LET RuleExclusions <= X.RuleExclusions || NULL

    LET ExcludeRegex <= if(condition=RuleExclusions,
         then=join(array=RuleExclusions.RuleTitleRegex, sep="|"),
         else="XXXXXXX")

    LET RuleStatusRegex <= get(item=dict(
         `Stable`="stable",
         `Stable and Experimental`="stable|experimental",
         `Stable and Test`="stable|test",
         `All Rules`="."), member=RuleStatus)

    LET RuleLevelRegex <= get(item=dict(
         `Critical`="critical",
         `Critical and High`="critical|high",
         `Critical, High, and Medium`="critical|high|medium|default",
         `All`="."), member=RuleLevel)

    LET Hostname <= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname

    {{ if .LogSources }}
    LET LogSources <= sigma_log_sources(
    {{ range .LogSources }}
      `{{ .Name }}`={
  {{ Indent .Query 5 }}
      },
    {{- end -}}
    `velociraptor/info/*`={ SELECT * FROM info() WHERE FALSE })
    {{ end }}

    LET FieldMapping <= parse_json(data=gunzip(string=base64decode(string="{{.Base64FieldMapping}}")) || "{}")

    LET DefaultDetails <= parse_json(data=gunzip(string=base64decode(string="{{.Base64DefaultDetailsLookup}}")) || "{}")

    LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''
    LET RuleFilterLambda = '''x=>x.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''

    LET GetProcInfo(PID) = to_dict(item={
      SELECT * FROM items(item=process_tracker_get(id=System.ProcessID).Data)
         WHERE _key =~ "Name|CommandLine|CreateTime|Exe|Cwd|Username"
      }) + dict(CreateTime=timestamp(epoch=process_tracker_get(id=System.ProcessID).Data.StartTime))

    LET EBFFEvent = generate(name="EBPF Event Generator", query={
      SELECT *, EventData + dict(ProcInfo=GetProcInfo(PID=System.ProcessID)) AS EventData
      FROM delay(
        query={
          SELECT timestamp(epoch=now()) AS Timestamp,
                 System.EventName AS EventType,
                 System + dict(MainHostname=Hostname) AS System, EventData
          FROM watch_ebpf(events=[
              "security_file_open",
              "bpf_attach", "fchownat", "chown", "kill",
              "module_free", "module_load",
              "mount", "sched_process_exec", "net_packet_dns_response",
              "security_socket_accept", "security_socket_bind", "security_socket_connect",
              "unlink", "security_inode_unlink"
          ])
      }, delay=5)
    })


FieldMappings:
  EventData: "x=>x.EventData"
  Timestamp: "x=>timestamp(epoch=now())"
  EventName: "x=>x.System.EventName"
  TargetFilename: "x=>x.EventData.pathname"
  Image: "x=>x.EventData.ProcInfo.Exe"
  CommandLine: "x=>x.EventData.argv"
  ParentImage: "x=>process_tracker_get(id=x.System.ParentProcessID).Data.Exe"
  ParentCommandLine: "x=>process_tracker_get(id=x.System.ParentProcessID).Data.CommandLine"
  User: "x=>process_tracker_get(id=x.System.ProcessID).Data.Username"
  LogonId: "x=>System.UserID"
  CurrentDirectory: "x=>stat(filename=format(format='/proc/%v/cwd', args=x.System.ProcessID)).Data.Link"
  DestinationIp: "x=>x.EventData.remote_addr.sin_addr"
  DestinationHostname: "x=>x.EventData.remote_addr.dns_names"
  Initiated: "x=>x.System.EventName = 'security_socket_connect'"
  DestinationPort: "x=>x.EventData.remote_addr.sin_port"


DefaultDetails:
  Query: |
    x=>get(item=DefaultDetails,
           member=format(format="%v/%v",
              args=[x.System.Provider.Name, x.System.EventID.Value])
          ) || x.Message || x.UserData || x.EventData
  Lookup:
    X: X

Sources:
  "network_connection/linux/*":
    query: |
      SELECT * FROM EBFFEvent
      WHERE System.EventName = "security_socket_connect"

  "file_event/linux/*":
    query: |
      SELECT * FROM EBFFEvent
      WHERE System.EventName = "security_file_open"

  "process_creation/linux/*":
    query: |
      SELECT * FROM EBFFEvent
      WHERE System.EventName = "sched_process_exec"

  "ebpf/linux/*":
    description: |
      Reports events from the ebpf subsystem.

      NOTE: Events are enriched using the process tracker. You
      probably want to also collect the `Linux.Events.TrackProcesses`
      monitoring artifact.

    samples:
      - name: "security_file_open: A file is opened"
        json: "config/samples/Linux-EBPF-security_file_open.json"
      - name: "bpf_attach: A program is loading a new eBPF program into the kernel."
        json: "config/samples/Linux-EBPF-bpf_attach.json"
      - name: "kill: Kill another process"
        json: "config/samples/Linux-EBPF-kill.json"
      - name: "module_load: A module is loaded into the kernel"
        json: "config/samples/Linux-EBPF-module_free.json"
      - name: "mount: A filesystem is mounted"
        json: "config/samples/Linux-EBPF-mount.json"
      - name: "sched_process_exec: A process starts"
        json: "config/samples/Linux-EBPF-sched_process_exec.json"
      - name: "security_socket_connect: A process is making an outbound connection"
        json: "config/samples/Linux-EBPF-security_socket_connect.json"
      - name: "security_socket_bind: A process is binding to a socket"
        json: "config/samples/Linux-EBPF-security_socket_bind.json"
      - name: "security_inode_unlink: A file is deleted"
        json: "config/samples/Linux-EBPF-security_inode_unlink.json"
      - name: "chown: A file is changing ownership"
        json: "config/samples/Linux-EBPF-chown.json"

    query: |
      SELECT * FROM EBFFEvent

QueryTemplate: |
 sources:
 - query: |
    LET Result = SELECT System.Timestamp AS Timestamp,
          Hostname AS Computer,
          "EBPF" AS Channel,
          System.EventName AS EID,
          _Rule.Level AS Level,
          _Rule.Title AS Title,
          Details,
          dict(System=System,
               EventData=X.EventData || X.UserData,
               Message=X.Message) AS _Event,
          _Match, *
    FROM sigma(
      rules=split(string= SigmaRules, sep_string="\n---\n"),
      log_sources= LogSources, debug=Debug,
      default_details='''{{.Base64DefaultDetailsQuery}}''',
      rule_filter="x=>x.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex",
      field_mapping= FieldMapping)

    SELECT * FROM if(condition=Debug, then={
      SELECT * FROM Result
    }, else={
      SELECT Timestamp, Computer, Channel , EID,
             Level, Title, Details, _Event
      FROM Result
    })
