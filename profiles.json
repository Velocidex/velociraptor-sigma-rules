{"":{"DefaultDetails":{},"Sources":{},"DocTemplate":"{{ .Config.Description }}\n\n## Log Sources\n\nFollowing is a list of recognized log sources.\n\n\u003ctable class=\"scroll-datatable\"\u003e\n\u003cthead\u003e\u003ctr\u003e\n   \u003cth\u003eLog Source\u003c/th\u003e\n   \u003cth \u003eDesc\u003c/th\u003e\n\u003c/tr\u003e\u003c/thead\u003e\n\u003ctbody\u003e\n{{ range .LogSources }}\n\u003ctr\u003e\n  \u003ctd \u003e{{ \"{{\u003c link-heading \\\"\" }} {{.Name}} {{\"\\\" \u003e}}\" }}\u003c/td\u003e\n  \u003ctd \u003e{{ .Summary }}\u003c/td\u003e\n\u003c/tr\u003e\n{{ end }}\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n## Field Mappings\n\nThe following field mappings can be used to access fields within the\nevent. Note that it is also possible to access the fields directly\n(e.g. `EventData.AccessMask`)\n\n{{ \"{{% expand \\\"View all Field Mappings\\\" %}}\" }}\n\n\u003ctable class=\"datatable\"\u003e\u003cthead\u003e\u003ctr\u003e\u003cth\u003eName\u003c/th\u003e\u003cth\u003eMapping\u003c/th\u003e\u003c/tr\u003e\u003c/thead\u003e\n\u003ctbody\u003e\n{{ range .FieldMappings }}\n\u003ctr\u003e\u003ctd\u003e{{ .Name }}\u003c/td\u003e\u003ctd\u003e{{ .Mapping }}\u003c/td\u003e\u003c/tr\u003e\n{{ end }}\n\u003c/tbody\u003e\n\u003c/table\u003e\n\n{{ \"{{% /expand %}}\" }}\n\n\u003chr /\u003e\n\n{{ range .LogSources }}\n## `{{ .Name }}`\n\n{{ .Description }}\n\n{{ \"{{% expand \\\"Details\\\" %}}\" }}\n\n#### VQL Query\n\n```sql\n{{ .Query }}\n```\n\n{{ if .Samples }}\n#### Sample Events\n{{ range .Samples }}\n\n##### {{ .Name }}\n\u003cpre class=\"json-renderer\"\u003e\n{{ ReadFile .Json }}\n\u003c/pre\u003e\n{{ end }}\n\n{{ end }}\n\n#### Sample use in a sigma rule:\n```yaml\nlogsource:\n  {{- if .LogSource.Category }}\n  category: {{ .LogSource.Category }}\n  {{- end }}\n  {{- if .LogSource.Product }}\n  product: {{ .LogSource.Product }}\n  {{- end }}\n  {{- if .LogSource.Service }}\n  service: {{ .LogSource.Service }}\n  {{- end }}\n```\n\n{{ \"{{% /expand %}}\" }}\n\n{{ end }}\n"},"Linux.Sigma.Base":{"Name":"Linux.Sigma.Base","Description":"# Linux Base Sigma Model\n\nThis model is designed for triage of dead disk or file based live\nanalysis. The rules that use this model will be evaluated once on\nall events.\n\nAfter all relevant rules are evaluated, the collection is complete.\n\nNOTE: Auditd configuration based on\nhttps://raw.githubusercontent.com/Neo23x0/auditd/refs/heads/master/audit.rules\n","Preamble":"name: Linux.Sigma.Base\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: /var/log/\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - Critical\n      - Critical and High\n      - All\n\n  - name: DefaultYear\n    description: The Default year for parsing Syslog timestamps (default current year)\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n","FieldMappings":{"":"x=\u003ex","CommandLine":"x=\u003ex.Process.title","DestinationHostname":"x=\u003ehost(name=x.Dest.ip, type=\"PTR\", tracker_only=TRUE)","DestinationIp":"x=\u003ex.Dest.ip","DestinationPort":"x=\u003ex.Dest.port","Image":"x=\u003ex.Process.exe","Initiated":"x=\u003ex.Net.direction =~ \"egress\"","TargetFilename":"x=\u003ex.File.path","a0":"x=\u003ex.Process.args[0]","a1":"x=\u003ex.Process.args[1]","a2":"x=\u003ex.Process.args[2]","a3":"x=\u003ex.Process.args[3]","a4":"x=\u003ex.Process.args[4]","a5":"x=\u003ex.Process.args[5]","a6":"x=\u003ex.Process.args[6]","a7":"x=\u003ex.Process.args[7]","comm":"x=\u003ex.Process.name","exe":"x=\u003ex.Process.exe","key":"x=\u003ex.Tags[0]","name":"x=\u003ex.Process.name","nametype":"x=\u003ex.Paths.nametype","syscall":"x=\u003ex.Data.syscall","type":"x=\u003eupcase(string=x.Type)","unit":"x=\u003ex.Data.unit"},"DefaultDetails":{"Query":"x=\u003ex.Line","Lookup":{"A":"x=\u003ex.Line"}},"Sources":{"*/linux/*":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|syslog|secure\")\n"},"*/linux/sshd":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\nWHERE Line =~ \"sshd\"\n"},"*/linux/cron":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"syslog\")\nWHERE Line =~ \"cron\"\n"},"*/linux/auth":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\n"},"*/linux/syslog":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"syslog\")\n"},"*/linux/sudo":{"query":"SELECT * FROM ParseLogFile(ROOT=ROOT, Filter=\"auth.log|secure\")\nWHERE Line =~ \"sudo:\"\n"},"*/linux/auditd":{"query":"SELECT * FROM AuditdEvents\n"},"network_connection/linux/*":{"query":"SELECT * FROM AuditdEvents\nWHERE Summary.action = \"connected-to\"\n"},"process_creation/linux/*":{"query":"SELECT * FROM ParseAuditdLogFile(ROOT=ROOT + \"/audit/\", Filter=\"audit.log\")\n"}},"ExportTemplate":"export: |\n  LET X = scope()\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       Critical=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET ParseLogFile(Filter, ROOT) =\n      SELECT OSPath.Basename AS Channel, Line FROM foreach(row={\n         SELECT OSPath FROM glob(globs=\"*\", root=ROOT)\n         WHERE OSPath.Basename =~ Filter\n      }, query={\n         SELECT OSPath, Line\n         FROM parse_lines(filename=OSPath)\n      })\n\n  LET ParseAuditdLogFile(Filter, ROOT) =\n      SELECT OSPath.Basename AS Channel, * FROM foreach(row={\n         SELECT OSPath FROM glob(globs=\"*\", root=ROOT)\n         WHERE OSPath.Basename =~ Filter\n      }, query={\n         SELECT OSPath, *\n         FROM parse_auditd(filename=OSPath)\n      })\n\n  -- Used to parse syslog lines\n  LET DefaultYear \u003c= format(format=\" %v\", args=DefaultYear || timestamp(epoch=now()).Year)\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET ParseTimestamp(Line) = grok(grok=\"%{SYSLOGTIMESTAMP:timestamp}\", data=Line)\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  LET AuditdEvents = generate(name=\"Auditd Events\", query={\n    SELECT * FROM ParseAuditdLogFile(ROOT=ROOT + \"/audit/\", Filter=\"audit.log\")\n  })\n","QueryTemplate":"sources:\n- query: |\n    SELECT Timestamp,\n           Hostname AS Computer,\n           Channel,\n           _Rule.Level AS Level,\n           _Rule.Title AS Title,\n           Details,\n           *\n    FROM sigma(\n       rules=split(string= Rules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= LogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       rule_filter=RuleFilterLambda,\n       field_mapping= FieldMapping)\n","ImportConfigs":["config/base_doc.yaml"]},"Linux.Sigma.Base.CaptureTestSet":{"Name":"Linux.Sigma.Base.CaptureTestSet","Preamble":"name: Linux.Sigma.Base.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Linux.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: /var/log/\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - Critical\n      - Critical and High\n      - All\n\n  - name: DefaultYear\n    description: The Default year for parsing Syslog timestamps (default current year)\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    {{- range .ImportedLogSources }}\n    - \"{{ .Name }}\"\n    {{- end }}\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Linux.Sigma.Base\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n\n- query: |\n    SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    })\n","ImportConfigs":["config/linux_base.yaml"]},"Linux.Sigma.Base.ReplayTestSet":{"Name":"Linux.Sigma.Base.ReplayTestSet","Preamble":"name: Linux.Sigma.Base.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Linux.Sigma.Base\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    SELECT  _Rule.Title AS Rule ,\n      Details,\n      dict(System=System,\n           EventData=X.EventData || X.UserData,\n           Message=X.Message) AS Event,\n      _Match AS Match\n\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n","ImportConfigs":["config/linux_base.yaml"]},"Linux.Sigma.EBPFBase":{"Name":"Linux.Sigma.EBPFBase","Description":"# Linux Base eBPF Model\n\nThis model is designed to follow eBPF events on Linux.\n\nEvents are provided by various eBPF functions in the `watch_ebpf()`\nplugin. These events can provide security critical information which\ncan be detected using Sigma Rules.\n","Preamble":"name: Linux.Sigma.EBPFBase\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Linux.\n\n  This model uses Velociraptor's EBPF engine which is based on\n  tracee https://github.com/aquasecurity/tracee.\n\n  This model is compatible with the Sigma HQ rules and it is used by\n  the artifact `Linux.EBPF.Monitoring`.\n\n  This artifact was built on {{ .Time }}\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n","FieldMappings":{"CommandLine":"x=\u003ex.EventData.argv","CurrentDirectory":"x=\u003estat(filename=format(format='/proc/%v/cwd', args=x.System.ProcessID)).Data.Link","DestinationHostname":"x=\u003ex.EventData.remote_addr.dns_names","DestinationIp":"x=\u003ex.EventData.remote_addr.sin_addr","DestinationPort":"x=\u003ex.EventData.remote_addr.sin_port","EventData":"x=\u003ex.EventData","EventName":"x=\u003ex.System.EventName","Image":"x=\u003ex.EventData.ProcInfo.Exe","Initiated":"x=\u003ex.System.EventName = 'security_socket_connect'","LogonId":"x=\u003eSystem.UserID","ParentCommandLine":"x=\u003eprocess_tracker_get(id=x.System.ParentProcessID).Data.CommandLine","ParentImage":"x=\u003eprocess_tracker_get(id=x.System.ParentProcessID).Data.Exe","TargetFilename":"x=\u003ex.EventData.pathname","Timestamp":"x=\u003etimestamp(epoch=now())","User":"x=\u003eprocess_tracker_get(id=x.System.ProcessID).Data.Username"},"DefaultDetails":{"Query":"x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData\n","Lookup":{"X":"X"}},"Sources":{"network_connection/linux/*":{"query":"SELECT * FROM EBFFEvent\nWHERE System.EventName = \"security_socket_connect\"\n"},"file_event/linux/*":{"query":"SELECT * FROM EBFFEvent\nWHERE System.EventName = \"security_file_open\"\n"},"process_creation/linux/*":{"query":"SELECT * FROM EBFFEvent\nWHERE System.EventName = \"sched_process_exec\"\n"},"ebpf/linux/*":{"query":"SELECT * FROM EBFFEvent\n","description":"Reports events from the ebpf subsystem.\n\nNOTE: Events are enriched using the process tracker. You\nprobably want to also collect the `Linux.Events.TrackProcesses`\nmonitoring artifact.\n","samples":[{"name":"security_file_open: A file is opened","json":"config/samples/Linux-EBPF-security_file_open.json"},{"name":"bpf_attach: A program is loading a new eBPF program into the kernel.","json":"config/samples/Linux-EBPF-bpf_attach.json"},{"name":"kill: Kill another process","json":"config/samples/Linux-EBPF-kill.json"},{"name":"module_load: A module is loaded into the kernel","json":"config/samples/Linux-EBPF-module_free.json"},{"name":"mount: A filesystem is mounted","json":"config/samples/Linux-EBPF-mount.json"},{"name":"sched_process_exec: A process starts","json":"config/samples/Linux-EBPF-sched_process_exec.json"},{"name":"security_socket_connect: A process is making an outbound connection","json":"config/samples/Linux-EBPF-security_socket_connect.json"},{"name":"security_socket_bind: A process is binding to a socket","json":"config/samples/Linux-EBPF-security_socket_bind.json"},{"name":"security_inode_unlink: A file is deleted","json":"config/samples/Linux-EBPF-security_inode_unlink.json"},{"name":"chown: A file is changing ownership","json":"config/samples/Linux-EBPF-chown.json"}]}},"ExportTemplate":"export: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() WHERE FALSE })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")) || \"{}\")\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")) || \"{}\")\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  LET GetProcInfo(PID) = to_dict(item={\n    SELECT * FROM items(item=process_tracker_get(id=PID).Data)\n       WHERE _key =~ \"Name|CommandLine|CreateTime|Exe|Cwd|Username\"\n    })\n\n  // Get proc info from the process tracker but if that fails fill\n  // it from the event. The process tracker may fail to find the process\n  // if the EBPF process tracker is not enabled\n  LET GetProcInfoFallback(ProcInfo, EventData, System) = if(\n     condition=ProcInfo.Name,\n       then=ProcInfo,\n       else=dict(Name=System.ProcessName,\n                 CommandLine=join(array=EventData.argv, sep=\" \"),\n                 CreateTime=timestamp(epoch=EventData.ctime) || System.ThreadStartTime,\n                 Exe=EventData.pathname,\n                 Username=System.UserID))\n\n  LET EBFFEvent = generate(name=\"EBPF Event Generator\", query={\n    SELECT *, EventData + dict(\n         Test=process_tracker_get(id=System.ProcessID),\n         ProcInfo=GetProcInfoFallback(\n            ProcInfo=GetProcInfo(PID=System.ProcessID),\n            EventData=EventData,\n            System=System)\n      ) AS EventData\n    FROM delay(\n      query={\n        SELECT timestamp(epoch=now()) AS Timestamp,\n               System.EventName AS EventType,\n               System + dict(MainHostname=Hostname) AS System, EventData\n        FROM watch_ebpf(events=[\n            \"security_file_open\",\n            \"bpf_attach\", \"fchownat\", \"chown\", \"kill\",\n            \"module_free\", \"module_load\",\n            \"mount\", \"sched_process_exec\", \"net_packet_dns_response\",\n            \"security_socket_accept\", \"security_socket_bind\", \"security_socket_connect\",\n            \"unlink\", \"security_inode_unlink\"\n        ])\n    }, delay=5)\n  })\n","QueryTemplate":"sources:\n- query: |\n   LET Result = SELECT System.Timestamp AS Timestamp,\n         Hostname AS Computer,\n         \"EBPF\" AS Channel,\n         System.EventName AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details='''{{.Base64DefaultDetailsQuery}}''',\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, Details, _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","ImportConfigs":["config/base_doc.yaml"]},"Linux.Sigma.EBPFBase.CaptureTestSet":{"Name":"Linux.Sigma.EBPFBase.CaptureTestSet","Preamble":"name: Linux.Sigma.EBPFBase.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Linux.EBPF.BaseEvent. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    {{- range .ImportedLogSources }}\n    - \"{{ .Name }}\"\n    {{- end }}\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Linux.Sigma.EBPFBase\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","ImportConfigs":["config/linux_ebpf_base.yaml"]},"Linux.Sigma.EBPFBase.ReplayTestSet":{"Name":"Linux.Sigma.EBPFBase.ReplayTestSet","Preamble":"name: Linux.Sigma.EBPFBase.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: /path/to/file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Linux.Sigma.EBPFBase\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT System.Timestamp AS Timestamp,\n       Hostname AS Computer,\n       \"EBPF\" AS Channel,\n       System.EventName AS EID,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","ImportConfigs":["config/linux_ebpf_base.yaml"]},"Windows.Sigma.Base":{"Name":"Windows.Sigma.Base","Description":"# Windows.Sigma.Base Model\n\nThis model is designed for triage of dead disk, or file based live\nanalysis. The rules that use this model will be evaluated once on\nall events.\n\nAfter all relevant rules are evaluated, the collection is complete.\n","Preamble":"name: Windows.Sigma.Base\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Sigma on Windows.\n\n  NOTE: This artifact does not include any rules. You can launch it\n  with rules provided to the SigmaRules parameter or call it from\n  another artifact with a set of rules passed to the SigmaRules\n  parameter.\n\n  This artifact was built on {{ .Time }}\n\ntype: CLIENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"Critical, High, Medium, and Low\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\n","FieldMappings":{"":"x=\u003eserialize(item=x.EventData)","AccessList":"x=\u003ex.EventData.AccessList","AccessMask":"x=\u003ex.EventData.AccessMask","AccessReason":"x=\u003ex.EventData.AccessReason","Accesses":"x=\u003ex.EventData.Accesses","AccountDomain":"x=\u003ex.EventData.AccountDomain","AccountExpires":"x=\u003ex.EventData.AccountExpires","AccountName":"x=\u003ex.EventData.AccountName","Account_Name":"x=\u003ex.EventData.Account_Name","Action":"x=\u003ex.EventData.Action","ActionName":"x=\u003ex.EventData.ActionName","AdditionalInfo":"x=\u003ex.EventData.AdditionalInfo","Address":"x=\u003ex.EventData.Address","AllowedToDelegateTo":"x=\u003ex.EventData.AllowedToDelegateTo","AppID":"x=\u003ex.EventData.AppID","AppName":"x=\u003ex.EventData.Data[0]","AppVersion":"x=\u003ex.EventData.AppVersion","Application":"x=\u003ex.EventData.Application","ApplicationPath":"x=\u003ex.EventData.ApplicationPath","AttributeLDAPDisplayName":"x=\u003ex.EventData.AttributeLDAPDisplayName","AttributeValue":"x=\u003ex.EventData.AttributeValue","AuditPolicyChanges":"x=\u003ex.EventData.AuditPolicyChanges","AuditSourceName":"x=\u003ex.EventData.AuditSourceName","AuthenticationPackageName":"x=\u003ex.EventData.AuthenticationPackageName","Binary":"x=\u003ex.EventData.Binary","BootMode":"x=\u003ex.EventData.BootMode","CallTrace":"x=\u003ex.EventData.CallTrace","CallerProcessName":"x=\u003ex.EventData.CallerProcessName","Caller_Process_Name":"x=\u003ex.EventData.Caller_Process_Name","CallingProcessName":"x=\u003ex.EventData.CallingProcessName","Caption":"x=\u003ex.EventData.Caption","CategoryId":"x=\u003ex.EventData.CategoryId","CategoryName":"x=\u003ex.EventData.`Category Name`","CertThumbprint":"x=\u003ex.EventData.CertThumbprint","Channel":"x=\u003ex.System.Channel","ClassName":"x=\u003ex.EventData.ClassName","ClientAddress":"x=\u003ex.EventData.ClientAddress","ClientInfo":"x=\u003ex.EventData.ClientInfo","ClientName":"x=\u003ex.EventData.ClientName","ClientProcessId":"x=\u003ex.EventData.ClientProcessId","Client_Address":"x=\u003ex.EventData.Client_Address","CommandLine":"x=\u003ex.EventData.CommandLine || x.CommandLine","Company":"x=\u003ex.EventData.Company","CompatibleIds":"x=\u003ex.EventData.CompatibleIds","Computer":"x=\u003ex.System.Computer","ComputerName":"x=\u003ex.System.Computer","Configuration":"x=\u003ex.EventData.Configuration","Consumer":"x=\u003ex.EventData.Consumer","Contents":"x=\u003ex.EventData.Contents","ContextInfo":"x=\u003ex.EventData.ContextInfo","CountOfCredentialsReturned":"x=\u003ex.EventData.CountOfCredentialsReturned","CreationUtcTime":"x=\u003ex.EventData.CreationUtcTime","CurrentDirectory":"x=\u003ex.EventData.CurrentDirectory","Data":"x=\u003eserialize(item=x.EventData)","Description":"x=\u003ex.EventData.Description","DestAddress":"x=\u003ex.EventData.DestAddress","DestPort":"x=\u003ex.EventData.DestPort","Destination":"x=\u003ex.EventData.Destination","DestinationAddress":"x=\u003ex.EventData.DestinationAddress","DestinationHostname":"x=\u003ex.EventData.DestinationHostname","DestinationIp":"x=\u003ex.EventData.DestinationIp","DestinationIsIpv6":"x=\u003ex.EventData.DestinationIsIpv6","DestinationPort":"x=\u003ex.EventData.DestinationPort","Details":"x=\u003ex.EventData.Details","DetectionSource":"x=\u003ex.EventData.DetectionSource","DetectionUser":"x=\u003ex.EventData.`Detection User`","Device":"x=\u003ex.EventData.Device","DeviceClassName":"x=\u003ex.EventData.DeviceClassName","DeviceDescription":"x=\u003ex.EventData.DeviceDescription","DeviceId":"x=\u003ex.EventData.DeviceId","DeviceInstanceID":"x=\u003ex.UserData.InstallDeviceID.DeviceInstanceID","DeviceName":"x=\u003ex.EventData.DeviceName","Direction":"x=\u003ex.EventData.Direction","DisplayName":"x=\u003ex.EventData.DisplayName","DomainName":"x=\u003ex.EventData.SubjectDomainName","DriveName":"x=\u003ex.EventData.DriveName","DriverDescription":"x=\u003ex.UserData.InstallDeviceID.DriverDescription","DriverProvider":"x=\u003ex.UserData.InstallDeviceID.DriverProvider","DvrFmwk2003InstanceId":"x=\u003ex.UserData.UMDFHostDeviceArrivalBegin.InstanceId","DvrFmwkInstanceId":"x=\u003ex.UserData.UMDFHostDeviceRequest.InstanceId","EngineVersion":"x=\u003ex.EventData.EngineVersion","ErrorCode":"x=\u003ex.EventData.ErrorCode","EventData":"x=\u003ex.EventData","EventID":"x=\u003ex.System.EventID.Value","EventNamespace":"x=\u003ex.EventData.EventNamespace","EventSourceId":"x=\u003ex.EventData.EventSourceId","EventType":"x=\u003ex.EventData.EventType","ExceptionCode":"x=\u003ex.EventData.ExceptionCode","ExecutionProcessID":"x=\u003ex.System.Execution.ProcessID","FailureCode":"x=\u003ex.EventData.FailureCode","FailureReason":"x=\u003ex.EventData.FailureReason","Feature_Name":"x=\u003ex.EventData.`Feature Name`","FileMagicBytes":"x=\u003ex.EventData.FileMagicBytes","FileName":"x=\u003ex.EventData.FileName","FileNameBuffer":"x=\u003ex.EventData.FileNameBuffer","FilePath":"x=\u003ex.EventData.FilePath","FileVersion":"x=\u003ex.EventData.FileVersion","Filename":"x=\u003ex.EventData.Filename","Filter":"x=\u003ex.EventData.Filter","FilterName":"x=\u003ex.EventData.FilterName","FilterOrigin":"x=\u003ex.EventData.FilterOrigin","GrandParentCommandLine":"x=\u003ex.EventData.GrandParentCommandLine","GrandParentImage":"x=\u003ex.EventData.GrandParentImage","GrantedAccess":"x=\u003ex.EventData.GrantedAccess","GroupName":"x=\u003ex.EventData.GroupName","GroupSid":"x=\u003ex.EventData.GroupSid","HandleId":"x=\u003ex.EventData.HandleId","Hash":"x=\u003ex.EventData.Hash","Hashes":"x=\u003ex.EventData.Hashes","HiveName":"x=\u003ex.EventData.HiveName","HomeDirectory":"x=\u003ex.EventData.HomeDirectory","HomePath":"x=\u003ex.EventData.HomePath","HostApplication":"x=\u003ex.EventData.HostApplication","HostName":"x=\u003ex.EventData.HostName","HostVersion":"x=\u003ex.EventData.HostVersion","ID":"x=\u003ex.EventData.ID","Image":"x=\u003ex.EventData.Image","ImageLoaded":"x=\u003ex.EventData.ImageLoaded","ImageName":"x=\u003ex.EventData.ImageName","ImagePath":"x=\u003ex.EventData.ImagePath","ImpersonationLevel":"x=\u003ex.EventData.ImpersonationLevel","Imphash":"x=\u003ex.EventData.Hashes","Initiated":"x=\u003ex.EventData.Initiated","InstallStatus":"x=\u003ex.UserData.InstallDeviceID.InstallStatus","InstanceID":"x=\u003ex.UserData.UMDFHostDeviceArrivalBegin.InstanceId","InstanceId":"x=\u003ex.EventData.InstanceId","IntegrityLevel":"x=\u003ex.EventData.IntegrityLevel","IpAddress":"x=\u003ex.EventData.IpAddress","IpPort":"x=\u003ex.EventData.IpPort","JobTitle":"x=\u003ex.EventData.name","KeyLength":"x=\u003ex.EventData.KeyLength","Keywords":"x=\u003ex.System.Keywords","LDAPDisplayName":"x=\u003ex.EventData.LDAPDisplayName","LayerRTID":"x=\u003ex.EventData.LayerRTID","Level":"x=\u003ex.System.Level","LocalAddresses":"x=\u003ex.EventData.LocalAddresses","LocalIP":"x=\u003ex.EventData.LocalIP","LocalName":"x=\u003ex.EventData.LocalName","LocalPort":"x=\u003ex.EventData.LocalPort","LocalPorts":"x=\u003ex.EventData.LocalPorts","LocationInformation":"x=\u003ex.EventData.LocationInformation","LogFileClearedChannel":"x=\u003ex.UserData.LogFileCleared.Channel","LogFileClearedSubjectUserName":"x=\u003ex.UserData.LogFileCleared.SubjectUserName","LogonGuid":"x=\u003ex.EventData.LogonGuid","LogonHours":"x=\u003ex.EventData.LogonHours","LogonID":"x=\u003ex.EventData.LogonId","LogonId":"x=\u003ex.EventData.LogonId","LogonProcessName":"x=\u003ex.EventData.LogonProcessName","LogonType":"x=\u003ex.EventData.LogonType","Logon_Account":"x=\u003ex.EventData.Logon_Account","Logon_Type":"x=\u003ex.EventData.LogonType","MD5":"x=\u003ex.EventData.MD5","MachineName":"x=\u003ex.EventData.MachineName","MandatoryLabel":"x=\u003eget(item=MandatoryLabelLookup, member=x.EventData.MandatoryLabel || \"-\")\n","MasterKeyId":"x=\u003ex.EventData.MasterKeyId","MemberName":"x=\u003ex.EventData.MemberName","MemberSid":"x=\u003ex.EventData.MemberSid","Message":"x=\u003ex.EventData","ModifyingApplication":"x=\u003ex.EventData.ModifyingApplication","ModifyingUser":"x=\u003ex.EventData.ModifyingUser","Module":"x=\u003ex.EventData.Module","ModuleMD5":"x=\u003ex.EventData.ModuleMD5","ModuleName":"x=\u003ex.EventData.ModuleName","ModulePath":"x=\u003ex.EventData.ModulePath","ModuleSHA1":"x=\u003ex.EventData.ModuleSHA1","ModuleSHA256":"x=\u003ex.EventData.ModuleSHA256","Name":"x=\u003ex.EventData.Name","NewDefaultPrinter":"x=\u003ex.EventData.NewDefaultPrinter","NewName":"x=\u003ex.EventData.NewName","NewProcessId":"x=\u003ex.EventData.NewProcessId","NewProcessName":"x=\u003ex.EventData.NewProcessName","NewTargetUserName":"x=\u003ex.EventData.NewTargetUserName","NewTemplateContent":"x=\u003e x.EventData.NewTemplateContent","NewTime":"x=\u003ex.EventData.NewTime","NewUacValue":"x=\u003ex.EventData.NewUacValue","NewValue":"x=\u003ex.EventData.NewValue","New_Value":"x=\u003ex.EventData.`New Value`","ObjectClass":"x=\u003ex.EventData.ObjectClass","ObjectDN":"x=\u003ex.EventData.ObjectDN","ObjectName":"x=\u003ex.EventData.ObjectName","ObjectServer":"x=\u003ex.EventData.ObjectServer","ObjectType":"x=\u003ex.EventData.ObjectType","ObjectValueName":"x=\u003ex.EventData.ObjectValueName","OldDefaultPrinter":"x=\u003ex.EventData.OldDefaultPrinter","OldTargetUserName":"x=\u003ex.EventData.OldTargetUserName","OldUacValue":"x=\u003ex.EventData.OldUacValue","OldValue":"x=\u003ex.EventData.OldValue","Operation":"x=\u003ex.EventData.Operation","OperationEssStartedNamespaceName":"x=\u003ex.UserData.Operation_EssStarted.NamespaceName","OperationEssStartedPossibleCause":"x=\u003ex.UserData.Operation_EssStarted.PossibleCause","OperationEssStartedProcessid":"x=\u003ex.UserData.Operation_EssStarted.Processid","OperationEssStartedProvider":"x=\u003ex.UserData.Operation_EssStarted.Provider","OperationEssStartedQuery":"x=\u003ex.UserData.Operation_EssStarted.Query","OperationEssStartedUser":"x=\u003ex.UserData.Operation_EssStarted.User","OperationType":"x=\u003ex.EventData.OperationType","Origin":"x=\u003ex.EventData.Origin","OriginalFileName":"x=\u003ex.EventData.OriginalFileName","OriginalFilename":"x=\u003ex.EventData.OriginalFileName","PID":"x=\u003ex.EventData.ProcessId","PackageFullName":"x=\u003ex.UserData.PackageFullName","PackagePath":"x=\u003ex.EventData.PackagePath","Param1":"x=\u003ex.EventData.Param1","Param2":"x=\u003ex.EventData.Param2","Param3":"x=\u003ex.EventData.Param3","ParentCommandLine":"x=\u003ex.EventData.ParentCommandLine","ParentImage":"x=\u003ex.EventData.ParentImage","ParentIntegrityLevel":"x=\u003ex.EventData.ParentIntegrityLevel","ParentMD5":"x=\u003ex.EventData.ParentMD5","ParentOfParentImage":"x=\u003ex.EventData.ParentOfParentImage","ParentProcessGuid":"x=\u003ex.EventData.ParentProcessGuid","ParentProcessId":"x=\u003ex.EventData.ParentProcessId","ParentProcessName":"x=\u003ex.EventData.ParentProcessName","ParentSHA1":"x=\u003ex.EventData.ParentSHA1","ParentSHA256":"x=\u003ex.EventData.ParentSHA256","ParentUser":"x=\u003ex.EventData.ParentUser","PasswordLastSet":"x=\u003ex.EventData.PasswordLastSet","Path":"x=\u003ex.EventData.Path","Payload":"x=\u003ex.EventData.Payload","PipeName":"x=\u003ex.EventData.PipeName","PossibleCause":"x=\u003ex.UserData.PossibleCause","PreAuthType":"x=\u003ex.EventData.PreAuthType","PreviousCreationUtcTime":"x=\u003ex.EventData.PreviousCreationUtcTime","PreviousTime":"x=\u003ex.EventData.PreviousTime","PrimaryGroupId":"x=\u003ex.EventData.PrimaryGroupId","PrinterCreated":"x=\u003ex.EventData.PrinterCreated","PrinterDeletionPending":"x=\u003ex.EventData.PrinterDeletionPending","PrinterName":"x=\u003ex.EventData.PrinterName","PrivilegeList":"x=\u003ex.EventData.PrivilegeList","ProcessCommandLine":"x=\u003ex.EventData.ProcessCommandLine","ProcessGuid":"x=\u003ex.EventData.ProcessGuid","ProcessID":"x=\u003ex.EventData.ProcessID","ProcessId":"x=\u003ex.EventData.ProcessId","ProcessName":"x=\u003ex.EventData.ProcessName","ProcessNameBuffer":"x=\u003ex.EventData.ProcessNameBuffer","ProcessPath":"x=\u003ex.EventData.ProcessPath","Product":"x=\u003ex.EventData.Product","ProfilePath":"x=\u003ex.EventData.ProfilePath","Profiles":"x=\u003ex.EventData.Profiles","Properties":"x=\u003ex.EventData.Properties","Protocol":"x=\u003ex.EventData.Protocol","Provider":"x=\u003ex.UserData.Provider","ProviderContextName":"x=\u003ex.EventData.ProviderContextName","ProviderName":"x=\u003ex.System.Provider.Name","Provider_Name":"x=\u003ex.System.Provider.Name","QNAME":"x=\u003ex.EventData.QNAME","Query":"x=\u003ex.UserData.Query","QueryName":"x=\u003ex.EventData.QueryName","QueryResults":"x=\u003ex.EventData.QueryResults","QueryStatus":"x=\u003ex.EventData.QueryStatus","ReadOnly":"x=\u003ex.EventData.ReadOnly","ReadOperation":"x=\u003ex.EventData.ReadOperation","Reason":"x=\u003ex.EventData.Reason","RecoveryKeyId":"x=\u003ex.EventData.RecoveryKeyId","RecoveryServer":"x=\u003ex.EventData.RecoveryServer","RelativeTargetName":"x=\u003ex.EventData.RelativeTargetName","RemoteAddresses":"x=\u003ex.EventData.RemoteAddresses","RemoteIP":"x=\u003ex.EventData.RemoteIP","RemoteMachineID":"x=\u003ex.EventData.RemoteMachineID","RemoteName":"x=\u003ex.EventData.RemoteName","RemotePort":"x=\u003ex.EventData.RemotePort","RemotePorts":"x=\u003ex.EventData.RemotePorts","RemoteUserID":"x=\u003ex.EventData.RemoteUserID","RequestedPolicy":"x=\u003ex.EventData.RequestedPolicy","ReturnCode":"x=\u003ex.EventData.ReturnCode","RuleName":"x=\u003ex.EventData.RuleName","SAMAccountName":"x=\u003ex.EventData.SamAccountName","SHA1":"x=\u003ex.EventData.SHA1","SHA256":"x=\u003ex.EventData.SHA256","SamAccountName":"x=\u003ex.EventData.SamAccountName","SchemaVersion":"x=\u003ex.EventData.SchemaVersion","ScriptBlockText":"x=\u003ex.EventData.ScriptBlockText","ScriptPath":"x=\u003ex.EventData.ScriptPath","SearchFilter":"x=\u003ex.System.SearchFilter","SecurityUserID":"x=\u003ex.System.Security.UserID","ServerAddress":"x=\u003ex.EventData.ServerAddress","ServerName":"x=\u003ex.System.ServerName","Service":"x=\u003ex.EventData.Service","ServiceAccount":"x=\u003ex.EventData.ServiceAccount","ServiceFileName":"x=\u003ex.EventData.ServiceFileName","ServiceName":"x=\u003ex.EventData.ServiceName","ServicePrincipalNames":"x=\u003ex.EventData.ServicePrincipalNames","ServiceStartType":"x=\u003ex.EventData.ServiceStartType","ServiceType":"x=\u003ex.EventData.ServiceType","SettingType":"x=\u003ex.EventData.SettingType","SettingValueString":"x=\u003ex.EventData.SettingValueString","SeverityID":"x=\u003ex.EventData.`Severity ID`","SeverityName":"x=\u003ex.EventData.`Severity Name`","ShareLocalPath":"x=\u003ex.EventData.ShareLocalPath","ShareName":"x=\u003ex.EventData.ShareName","SidHistory":"x=\u003ex.EventData.SidHistory","SidList":"x=\u003ex.EventData.SidList","Signature":"x=\u003ex.EventData.Signature","SignatureStatus":"x=\u003ex.EventData.SignatureStatus","Signed":"x=\u003ex.EventData.Signed","Source":"x=\u003ex.System.Provider_Name","SourceAddress":"x=\u003ex.EventData.SourceAddress","SourceCommandLine":"x=\u003ex.EventData.SourceCommandLine","SourceHostname":"x=\u003ex.EventData.SourceHostname","SourceImage":"x=\u003ex.EventData.SourceImage","SourceIp":"x=\u003ex.EventData.SourceIp","SourceIsIpv6":"x=\u003ex.EventData.SourceIsIpv6","SourceName":"x=\u003ex.EventData.SourceName","SourceNetworkAddress":"x=\u003ex.EventData.SourceNetworkAddress","SourceParentImage":"x=\u003ex.EventData.SourceParentImage","SourcePort":"x=\u003ex.EventData.SourcePort","SourceProcessGUID":"x=\u003ex.EventData.SourceProcessGUID","SourceProcessGuid":"x=\u003ex.EventData.SourceProcessGuid","SourceProcessId":"x=\u003ex.EventData.SourceProcessId","SourceSid":"x=\u003ex.EventData.SourceSid","SourceUser":"x=\u003ex.EventData.SourceUser","SourceUserName":"x=\u003ex.EventData.SourceUserName","Source_Name":"x=\u003ex.EventData.`Source Name`","Source_Network_Address":"x=\u003ex.EventData.Source_Network_Address","Source_WorkStation":"x=\u003ex.EventData.Source_WorkStation","StartAddress":"x=\u003ex.EventData.StartAddress","StartFunction":"x=\u003ex.EventData.StartFunction","StartModule":"x=\u003ex.EventData.StartModule","StartType":"x=\u003ex.EventData.StartType","State":"x=\u003ex.EventData.State","Status":"x=\u003ex.EventData.Status","SubStatus":"x=\u003ex.EventData.SubStatus","SubcategoryGuid":"x=\u003ex.EventData.SubcategoryGuid","SubcategoryId":"x=\u003ex.EventData.SubcategoryId","SubjectDomainName":"x=\u003ex.EventData.SubjectDomainName","SubjectLogonId":"x=\u003ex.EventData.SubjectLogonId","SubjectUserName":"x=\u003ex.EventData.SubjectUserName","SubjectUserSid":"x=\u003ex.EventData.SubjectUserSid","SysmonVersion":"x=\u003ex.EventData.SysmonVersion","TargetDomainName":"x=\u003ex.EventData.TargetDomainName","TargetFilename":"x=\u003ex.EventData.TargetFilename","TargetImage":"x=\u003ex.EventData.TargetImage","TargetInfo":"x=\u003ex.EventData.TargetInfo","TargetLogonId":"x=\u003ex.EventData.TargetLogonId","TargetName":"x=\u003ex.EventData.TargetName","TargetObject":"x=\u003ex.EventData.TargetObject","TargetOutboundUserName":"x=\u003ex.EventData.TargetOutboundUserName","TargetParentProcessId":"x=\u003ex.EventData.TargetParentProcessId","TargetProcessAddress":"x=\u003ex.EventData.TargetProcessAddress","TargetProcessGUID":"x=\u003ex.EventData.TargetProcessGUID","TargetProcessGuid":"x=\u003ex.EventData.TargetProcessGUID","TargetProcessId":"x=\u003ex.EventData.TargetProcessId","TargetServerName":"x=\u003ex.EventData.TargetServerName","TargetSid":"x=\u003ex.EventData.TargetSid","TargetUser":"x=\u003ex.EventData.TargetUser","TargetUserName":"x=\u003ex.EventData.TargetUserName","TargetUserSid":"x=\u003ex.EventData.TargetUserSid","TaskContent":"x=\u003ex.EventData.TaskContent","TaskContentNew":"x=\u003ex.EventData.TaskContentNew","TaskDate":"x=\u003ex.EventData.TaskContent","TaskName":"x=\u003ex.EventData.TaskName","TemplateContent":"x=\u003ex.EventData.TemplateContent","ThreatName":"x=\u003ex.EventData.`Threat Name`","TicketEncryptionType":"x=\u003ex.EventData.TicketEncryptionType","TicketOptions":"x=\u003ex.EventData.TicketOptions","Timestamp":"x=\u003ex.Timestamp","TokenElevationType":"x=\u003eget(item=TokenElevationTypeLookup, member=x.EventData.TokenElevationType || \"-\")","Type":"x=\u003ex.EventData.Type","Url":"x=\u003ex.EventData.url","User":"x=\u003ex.EventData.User","UserAccountControl":"x=\u003ex.EventData.UserAccountControl","UserContext":"x=\u003ex.EventData.UserContext","UserDataAddress":"x=\u003ex.UserData.EventXML.Address","UserDataCode":"x=\u003ex.UserData.Operation_StartedOperational.Code","UserDataConsumer":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.CONSUMER","UserDataESS":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.ESS","UserDataHostProcess":"x=\u003ex.UserData.Operation_StartedOperational.HostProcess","UserDataNamespace":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.Namespace","UserDataNamespaceName":"x=\u003ex.UserData.Operation_TemporaryEssStarted.NamespaceName","UserDataParam1":"x=\u003ex.UserData.EventXML.Param1","UserDataParam2":"x=\u003ex.UserData.EventXML.Param2","UserDataParam3":"x=\u003ex.UserData.EventXML.Param3","UserDataPossibleCause":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.PossibleCause","UserDataProcessID":"x=\u003ex.UserData.Operation_StartedOperational.ProcessID","UserDataProcessid":"x=\u003ex.UserData.Operation_TemporaryEssStarted.Processid","UserDataProviderName":"x=\u003ex.UserData.Operation_StartedOperational.ProviderName","UserDataProviderPath":"x=\u003ex.UserData.Operation_StartedOperational.ProviderPath","UserDataQuery":"x=\u003ex.UserData.Operation_TemporaryEssStarted.Query","UserDataSessionID":"x=\u003ex.UserData.EventXML.SessionID","UserDataUser":"x=\u003ex.UserData.EventXML.User","UserName":"x=\u003ex.EventData.UserName","UserParameters":"x=\u003ex.EventData.UserParameters","UserPrincipalName":"x=\u003ex.EventData.UserPrincipalName","UserWorkstations":"x=\u003ex.EventData.UserWorkstations","Value":"x=\u003ex.EventData.Value","Version":"x=\u003ex.System.Version","VhdFile":"x=\u003ex.EventData.VhdFile","VhdType":"x=\u003ex.EventData.VhdType","WindowsDefenderProcessName":"x=\u003ex.EventData.`Process Name`","Workstation":"x=\u003ex.EventData.Workstation","WorkstationName":"x=\u003ex.EventData.WorkstationName","image":"x=\u003ex.EventData.Image","jobId":"x=\u003ex.EventData.jobId","jobOwner":"x=\u003ex.EventData.jobOwner","jobTitle":"x=\u003ex.EventData.jobTitle","md5":"x=\u003eparse_string_with_regex(string=x.EventData.Hash || '', regex='MD5=([^,]+)').g1","param1":"x=\u003ex.EventData.param1","param2":"x=\u003ex.EventData.param2","param3":"x=\u003ex.EventData.param3","param4":"x=\u003ex.EventData.param4","param5":"x=\u003ex.EventData.param5","payload":"x=\u003ex.EventData.payload","process":"x=\u003ex.EventData.Process","processPath":"x=\u003ex.EventData.processPath","query":"x=\u003ex.EventData.Query","service":"x=\u003ex.EventData.Service","sha1":"x=\u003ex.EventData.Hashes","sha256":"x=\u003eparse_string_with_regex(string=x.EventData.Hash || '', regex='SHA256=([^,]+)').g1","subjectName":"x=\u003ex.EventData.SubjectName"},"DefaultDetails":{"Query":"x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData\n","Lookup":{"MSExchange CmdletLogs/6":"Data: %Data%","Microsoft-Windows-Bits-Client/3":"JobTitle: %jobTitle% ¦ JobID: %jobId% ¦ JobOwner: %jobOwner% ¦ Proc: %processPath% ¦ PID: %ProcessId%","Microsoft-Windows-DNS-Server-Service/150":"DLL: %param1%","Microsoft-Windows-DNS-Server-Service/770":"Path: %param1% ¦ SrcComp: %param2%","Microsoft-Windows-DriverFrameworks-UserMode/2003":"Device: %DvrFmwk2003InstanceId%","Microsoft-Windows-DriverFrameworks-UserMode/2100":"Device: %DvrFmwkInstanceId%","Microsoft-Windows-DriverFrameworks-UserMode/2102":"Device: %DvrFmwkInstanceId%","Microsoft-Windows-Ntfs/98":"Drive: %DriveName% ¦ Device: %DeviceName%","Microsoft-Windows-PowerShell/4103":"Payload: %Payload%","Microsoft-Windows-PowerShell/4104":"ScriptBlock: %ScriptBlockText%","Microsoft-Windows-PrintService/300":"PrinterCreated: %PrinterCreated%","Microsoft-Windows-PrintService/301":"DeletedPrinter: %Param1%","Microsoft-Windows-PrintService/302":"PrinterDeletionPending: %PrinterDeletionPending%","Microsoft-Windows-PrintService/354":"Printer: %Param1% ¦ DLL: %Param2% ¦ Error: %Param3%","Microsoft-Windows-PrintService/823":"OldDefaultPrinter: %OldDefaultPrinter% ¦ NewDefaultPrinter: %NewDefaultPrinter% ¦ Status: %Status% ¦ Module: %Module%","Microsoft-Windows-PrintService/848":"PrinterName: %PrinterName% ¦ ShareName: %ShareName%","Microsoft-Windows-PrintService/849":"PrinterName: %PrinterName% ¦ ShareName: %ShareName%","Microsoft-Windows-Security-Auditing/1102":"User: %LogFileClearedSubjectUserName%","Microsoft-Windows-Security-Auditing/4616":"PrevTime: %PreviousTime% ¦ NewTime: %NewTime% ¦ User: %SubjectUserName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4624":"Type: %LogonType% ¦ TgtUser: %TargetUserName% ¦ SrcComp: %WorkstationName% ¦ SrcIP: %IpAddress% ¦ LID: %TargetLogonId%","Microsoft-Windows-Security-Auditing/4625":"Type: %LogonType% ¦ TgtUser: %TargetUserName% ¦ SrcComp: %WorkstationName% ¦ SrcIP: %IpAddress% ¦ AuthPkg: %AuthenticationPackageName% ¦ Proc: %ProcessName%","Microsoft-Windows-Security-Auditing/4648":"TgtUser: %TargetUserName% ¦ SrcUser: %SubjectUserName% ¦ SrcIP: %IpAddress% ¦ Proc: %ProcessName% ¦ TgtSvr: %TargetInfo%","Microsoft-Windows-Security-Auditing/4656":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ ObjType: %ObjectType% ¦ AccessReason: %AccessReason% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4661":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjType: %ObjectType% ¦ ObjName: %ObjectName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4662":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ OpType: %OperationType% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4663":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ ObjType: %ObjectType% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4672":"TgtUser: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4673":"Proc: %ProcessName% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4674":"Svc: %ObjectName% ¦ User: %SubjectUserName% ¦ AccessMask: %AccessMask% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4688":"Cmdline: %CommandLine% ¦ Proc: %NewProcessName% ¦ PID: %NewProcessId% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4692":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ MasterKeyId: %MasterKeyId% ¦ RecoveryServer: %RecoveryServer% ¦ RecoveryKeyId: %RecoveryKeyId% ¦ FailureReason: %FailureReason%","Microsoft-Windows-Security-Auditing/4697":"Svc: %ServiceName% ¦ Path: %ServiceFileName% ¦ User: %SubjectUserName% ¦ SvcAcct: %ServiceAccount% ¦ SvcType: %ServiceType% ¦ SvcStartType: %ServiceStartType% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4698":"Name: %TaskName% ¦ Content: %TaskContent% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4699":"Name: %TaskName% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4719":"User: %SubjectUserName% ¦ AuditPolicyChanges: %AuditPolicyChanges% ¦ CategoryId: %CategoryId% ¦ SubcategoryGuid: %SubcategoryGuid% ¦ SubcategoryId: %SubcategoryId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4720":"TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid%","Microsoft-Windows-Security-Auditing/4728":"SrcSID: %MemberSid% ¦ TgtGrp: %TargetUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4732":"SrcSID: %MemberSid% ¦ TgtGrp: %TargetUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4738":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ SamUser: %SamAccountName% ¦ DisplayName: %DisplayName% ¦ UAC: %UserAccountControl% ¦ OldUAC: %OldUacValue% ¦ NewUAC: %NewUacValue% ¦ AcctExpires: %AccountExpires% ¦ AllowedToDelegateTo: %AllowedToDelegateTo% ¦ HomeDir: %HomeDirectory% ¦ HomePath: %HomePath% ¦ LogonHours: %LogonHours% ¦  PwLastSet: %PasswordLastSet% ¦ PrimaryGrpID: %PrimaryGroupId% ¦ PrivList: %PrivilegeList% ¦ ProfilePath: %ProfilePath% ¦ ScriptPath: %ScriptPath% ¦ SidHistory: %SidHistory% ¦ UserParams: %UserParameters% ¦ UPN: %UserPrincipalName% ¦ SrcComp: %UserWorkstations% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4742":"SPN: %ServicePrincipalNames% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ SamUser: %SamAccountName% ¦ DisplayName: %DisplayName% ¦ UAC: %UserAccountControl% ¦ OldUAC: %OldUacValue% ¦ NewUAC: %NewUacValue% ¦ AcctExpires: %AccountExpires% ¦ AllowedToDelegateTo: %AllowedToDelegateTo% ¦ HomeDir: %HomeDirectory% ¦ HomePath: %HomePath% ¦ LogonHours: %LogonHours% ¦  PwLastSet: %PasswordLastSet% ¦ PrimaryGrpID: %PrimaryGroupId% ¦ PrivList: %PrivilegeList% ¦ ProfilePath: %ProfilePath% ¦ ScriptPath: %ScriptPath% ¦ SidHistory: %SidHistory% ¦ UserParams: %UserParameters% ¦ UPN: %UserPrincipalName% ¦ SrcComp: %UserWorkstations% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4765":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ SrcUser: %SourceUserName% ¦ SrcSID: %SourceSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ PrivList: %PrivilegeList% ¦ SidList: %SidList% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4768":"TgtUser: %TargetUserName% ¦ Svc: %ServiceName% ¦ SrcIP: %IpAddress% ¦ Status: %Status% ¦ PreAuthType: %PreAuthType%","Microsoft-Windows-Security-Auditing/4769":"TgtUser: %TargetUserName% ¦ Svc: %ServiceName% ¦ SrcIP: %IpAddress% ¦ Status: %Status%","Microsoft-Windows-Security-Auditing/4776":"TgtUser: %TargetUserName% ¦ SrcComp: %Workstation% ¦ Status: %Status%","Microsoft-Windows-Security-Auditing/4778":"SrcUser: %AccountName% ¦ Domain: %AccountDomain% ¦ SrcIP: %ClientAddress% ¦ SrcComp: %ClientName% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4779":"SrcUser: %AccountName% ¦ Domain: %AccountDomain% ¦ SrcIP: %ClientAddress% ¦ SrcComp: %ClientName% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4781":"OldTgtUser: %OldTargetUserName% ¦ NewTgtUser: %NewTargetUserName% ¦ TgtSID: %TargetSid% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ PrivList: %PrivilegeList% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4794":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ Status: %Status% ¦ SrcComp: %Workstation% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4825":"Domain: %AccountDomain% ¦ User: %AccountName% ¦ SrcIP: %ClientAddress% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4904":"AuditSrcName: %AuditSourceName% ¦ EventSrcID: %EventSourceId% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4905":"AuditSrcName: %AuditSourceName% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5038":"Path: %param1%","Microsoft-Windows-Security-Auditing/5136":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ ObjDN: %ObjectDN% ¦ AttrLDAPName: %AttributeLDAPDisplayName% ¦ OpType: %OperationType% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5140":"SrcUser: %SubjectUserName% ¦ ShareName: %ShareName% ¦ SharePath: %ShareLocalPath% ¦ SrcIP: %IpAddress% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5142":"User: %SubjectUserName% ¦ ShareName: %ShareName% ¦ ShareLocalPath: %ShareLocalPath% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5145":"SrcUser: %SubjectUserName% ¦ ShareName: %ShareName% ¦ SharePath: %ShareLocalPath% ¦ Path: %RelativeTargetName% ¦ SrcIP: %IpAddress% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5156":"Proc: %Application% ¦ SrcIP: %SourceAddress% ¦ SrcPort: %SourcePort% ¦ TgtIP: %DestAddress% ¦ TgtPort: %DestPort% ¦ Protocol: %Protocol% ¦ TgtMachineID: %RemoteMachineID% ¦ TgtSID: %RemoteUserID% ¦ PID: %ProcessID%","Microsoft-Windows-Security-Auditing/5157":"Proc: %Application% ¦ SrcIP: %SourceAddress% ¦ SrcPort: %SourcePort% ¦ TgtIP: %DestAddress% ¦ TgtPort: %DestPort% ¦ Protocol: %Protocol% ¦ TgtMachineID: %RemoteMachineID% ¦ TgtSID: %RemoteUserID% ¦ PID: %ProcessID%","Microsoft-Windows-Security-Auditing/5379":"PID: %ClientProcessId% ¦ SrcUser: %SubjectUserName% ¦ Tgt: %TargetName% ¦ CredsReturned: %CountOfCredentialsReturned% ¦ ReturnCode: %ReturnCode% ¦ LID: %SubjectLogonId% ¦ SrcSID: %SubjectUserSid%","Microsoft-Windows-Security-Auditing/6281":"Path: %param1%","Microsoft-Windows-Security-Auditing/6416":"DeviceDescrip: %DeviceDescription% ¦ DeviceID: %DeviceId% ¦ LocInfo: %LocationInformation% ¦ CompatibleIDs: %CompatibleIds% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Sysmon/1":"Cmdline: %CommandLine% ¦ Proc: %Image% ¦ User: %User% ¦ ParentCmdline: %ParentCommandLine% ¦ LID: %LogonId% ¦ LGUID: %LogonGuid% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ ParentPID: %ParentProcessId% ¦ ParentPGUID: %ParentProcessGuid% ¦ Description: %Description% ¦ Product: %Product% ¦ Company: %Company% ¦ Hashes: %Hashes%","Microsoft-Windows-Sysmon/10":"SrcProc: %SourceImage% ¦ TgtProc: %TargetImage% ¦ SrcUser: %SourceUser% ¦ TgtUser: %TargetUser% ¦ Access: %GrantedAccess% ¦ SrcPID: %SourceProcessId% ¦ SrcPGUID: %SourceProcessGUID% ¦ TgtPID: %TargetProcessId% ¦ TgtPGUID: %TargetProcessGUID%","Microsoft-Windows-Sysmon/11":"Path: %TargetFilename% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/12":"EventType: %EventType% ¦ TgtObj: %TargetObject% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/13":"EventType: %EventType% ¦ TgtObj: %TargetObject%: %Details% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/14":"EventType: %EventType% ¦ TgtObj: %TargetObject%: %Details% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/15":"Path: %TargetFilename% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ Hash: %Hash%","Microsoft-Windows-Sysmon/16":"Config: %Configuration%","Microsoft-Windows-Sysmon/17":"Pipe: %PipeName% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/18":"Pipe: %PipeName% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/19":"Op: %Operation% ¦ Namespace: %EventNamespace% ¦ Name: %Name% ¦ Query: %query% ¦ User: %User%","Microsoft-Windows-Sysmon/2":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ CreationTime: %CreationUtcTime% ¦ PreviousTime: %PreviousCreationUtcTime% ¦ PID: %PID% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/20":"Op: %Operation% ¦ Type: %Type% ¦ Name: %Name% ¦ Tgt: %Destination% ¦ User: %User%","Microsoft-Windows-Sysmon/21":"Op: %Operation% ¦ Consumer: %Consumer% ¦ Filter: %Filter%","Microsoft-Windows-Sysmon/22":"Query: %QueryName% ¦ Result: %QueryResults% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/23":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/24":"Proc: %Image% ¦ User: %User% ¦ CliInfo: %ClientInfo% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/25":"Proc: %Image% ¦ Type: %Type% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/255":"ID: %ID% ¦ Description: %Description%","Microsoft-Windows-Sysmon/26":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/3":"Initiated: %Initiated% ¦ Proto: %Protocol% ¦ SrcIP: %SourceIp% ¦ SrcPort: %SourcePort% ¦ SrcHost: %SourceHostname% ¦ TgtIP: %DestinationIp% ¦ TgtPort: %DestinationPort% ¦ TgtHost: %DestinationHostname% ¦ User: %User% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/4":"State: %State% ¦ SysmonVer: %SysmonVersion% ¦ SchemaVer: %SchemaVersion%","Microsoft-Windows-Sysmon/5":"Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/6":"Path: %ImageLoaded% ¦ Sig: %Signature% ¦ Signed: %Signed% ¦ SigStatus: %SignatureStatus% ¦ Hashes: %Hashes%","Microsoft-Windows-Sysmon/7":"Image: %ImageLoaded% ¦ Proc: %Image% ¦ Description: %Description% ¦ Product: %Product% ¦ Company: %Company% ¦ Signed: %Signed% ¦ Sig: %SignatureStatus% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ Hash: %Hashes% ¦ OrigFilename: %OriginalFilename%","Microsoft-Windows-Sysmon/8":"SrcProc: %SourceImage% ¦ TgtProc: %TargetImage% ¦ SrcPID: %SourceProcessId% ¦ SrcPGUID: %SourceProcessGuid% ¦ TgtPID: %TargetProcessId% ¦ TgtPGUID: %TargetProcessGuid%","Microsoft-Windows-Sysmon/9":"Proc: %Image% ¦ Device: %Device% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-WMI-Activity/5859":"Namespace: %OperationEssStartedNamespaceName% ¦ Query: %UserDataQuery% ¦ SID: %OperationEssStartedUser% ¦ PID: %OperationEssStartedProcessid% ¦ Provider: %OperationEssStartedProvider% ¦ PossibleCause: %OperationEssStartedPossibleCause%","Microsoft-Windows-Windows Defender/1013":"Time: %Timestamp% ¦ User: %User%","Microsoft-Windows-Windows Defender/1116":"Threat: %ThreatName% ¦ Severity: %SeverityName% ¦ Type: %CategoryName% ¦ User: %DetectionUser% ¦ Path: %Path% ¦ Proc: %WindowsDefenderProcessName%","Microsoft-Windows-Windows Firewall With Advanced Security/2003":"Profile: %Profiles% ¦ Type: %SettingType% ¦ Value: %SettingValueString% ¦ User: %ModifyingUser% ¦ App: %ModifyingApplication%","Microsoft-Windows-Windows Firewall With Advanced Security/2004":"RuleName: %RuleName% ¦ App: %ApplicationPath% ¦ ModifyingApp: %ModifyingApplication% ¦ User: %ModifyingUser% ¦ Svc: %ServiceName% ¦ Protocol: %Protocol% ¦ LocalAddr: %LocalAddresses% ¦ LocalPort: %LocalPorts% ¦ RemoteAddr: %RemoteAddresses% ¦ RemotePort: %RemotePorts% ¦ Action: %Action%","MsiInstaller/1034":"Product: %Data[1]% ¦ Ver: %Data[2]% ¦ Vendor: %Data[5]% ¦ Status: %Data[4]%","MsiInstaller/11724":"Product: %Data[1]%","PowerShellCore/4103":"Payload: %Payload%","PowerShellCore/4104":"ScriptBlock: %ScriptBlockText%","Service Control Manager/7031":"Svc: %param1% ¦ CrashCount: %param2% ¦ Action: %param5%","Service Control Manager/7045":"Svc: %ServiceName% ¦ Path: %ImagePath% ¦ Acct: %AccountName% ¦ StartType: %StartType%"}},"Sources":{"*/windows/application":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Application.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Application"],"fields":["Channel","EventID"],"description":"This Log Source generates events from the Application Channel.\n\nThese are  usually stored in the file `C:\\Windows\\System32\\WinEvt\\Logs\\Application.evtx`\n\nThe channel stores a wide variety of system events from multiple\nservices.\n"},"*/windows/applocker":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n  ROOT + \"/Microsoft-Windows-AppLocker%4MSI and Script.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4EXE and DLL.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx\",\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-AppLocker/MSI and Script","Microsoft-Windows-AppLocker/EXE and DLL","Microsoft-Windows-AppLocker/Packaged app-Deployment","Microsoft-Windows-AppLocker/Packaged app-Execution"],"fields":["Channel","EventID"],"description":"This Log Source generates combined events from the Windows `AppLocker service`.\n\nEvents are usually stored in the files:\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-AppLocker%4MSI and Script.evtx`\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-AppLocker%4EXE and DLL.evtx`\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx`\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx`\n"},"*/windows/appmodel-runtime":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppModel-Runtime%4Admin.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-AppModel-Runtime/Admin"],"fields":["Channel","EventID"],"description":"This Log Source generates combined events from the Windows `AppModel Runtime`.\n\nEvents are usually stored in the files:\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-AppModel-Runtime%4Admin.evtx`\n"},"*/windows/appxdeployment-server":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-AppxPackaging/Operational"],"fields":["Channel","EventID"]},"*/windows/appxpackaging-om":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-AppxPackaging/Operational"],"fields":["Channel","EventID"]},"*/windows/bits-client":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Bits-Client%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Bits-Client/Operational"],"fields":["Channel","EventID","processPath","RemoteName"],"description":"This Log Source generates combined events from the Windows Bits Client service.\n\nEvents are usually stored in the files:\n  * `C:\\Windows\\System32\\WinEvt\\Logs\\Microsoft-Windows-Bits-Client%4Operational.evtx`\n\nThe BITS service is used to download files and it is often misused by threat actors to download malicious payloads.\n","samples":[{"name":"EventID 3 - New Job Creation","json":"config/samples/bits_client.json"}]},"*/windows/capi2":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CAPI2/Operational\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-CAPI2/Operational"],"fields":["Channel","EventID"]},"*/windows/certificateservicesclient-lifecycle-system":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational"],"fields":["Channel","EventID"]},"*/windows/codeintegrity-operational":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CodeIntegrity%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-CodeIntegrity/Operational"],"fields":["Channel","EventID"]},"*/windows/diagnosis-scripted":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Diagnosis-Scripted%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Diagnosis-Scripted/Operational"],"fields":["Channel","EventID"]},"*/windows/dns-client":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DNS Client Events%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-DNS Client Events/Operational"],"fields":["Channel","EventID"]},"*/windows/dns-server":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/DNS Server.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["DNS Server"],"fields":["Channel","EventID"]},"*/windows/dns-server-analytic":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DNS-Server%4Analytical.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-DNS-Server/Analytical"],"fields":["Channel","EventID"]},"*/windows/driver-framework":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-DriverFrameworks-UserMode/Operational"],"fields":["Channel","EventID"]},"*/windows/firewall-as":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Windows Firewall With Advanced Security/Firewall"],"fields":["Channel","EventID"]},"*/windows/ldap_debug":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-LDAP-Client%4Debug.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-LDAP-Client/Debug"],"fields":["Channel","EventID"]},"*/windows/lsa-server":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-LSA%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-LSA/Operational"],"fields":["Channel","EventID"]},"*/windows/microsoft-servicebus-client":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-ServiceBus-Client.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-ServiceBus-Client"],"fields":["Channel","EventID"]},"*/windows/msexchange-management":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/MSExchange Management.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["MSExchange Management"],"fields":["Channel","EventID"]},"*/windows/ntlm":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-NTLM%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-NTLM/Operational"],"fields":["Channel","EventID"]},"*/windows/openssh":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/OpenSSH%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["OpenSSH/Operational"],"fields":["Channel","EventID"]},"*/windows/powershell":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\",\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-PowerShell/Operational","PowerShellCore/Operational"],"fields":["Channel","EventID","MessageNumber","MessageTotal","ScriptBlockText","ScriptBlockId","ContextInfo","UserData","Payload"]},"*/windows/powershell-classic":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *, EventData + dict(\n   Data=EventData.Data[2],\n   HostApplication=parse_string_with_regex(\n     regex=\"HostApplication=([^\\\\r\\\\n]+)\",\n     string=EventData.Data[2]).g1) AS EventData\nFROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Windows PowerShell"],"fields":["Channel","EventID"]},"*/windows/printservice-admin":{},"*/windows/printservice-operational":{},"*/windows/security":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Security.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Security"],"fields":["Channel","EventID"]},"*/windows/security-mitigations":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Security-Mitigations.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Security-Mitigations"]},"*/windows/shell-core":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Shell-Core%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Shell-Core/Operational"],"fields":["Channel","EventID"]},"*/windows/smbclient-connectivity":{},"*/windows/smbclient-security":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-SmbClient%4Security.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-SmbClient/Security"],"fields":["Channel","EventID"]},"*/windows/sysmon":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Sysmon/Operational"],"fields":["Channel","EventID","Provider_Name","Imphash","sha1","sha256","md5","ImagePath","TargetParentImage"]},"*/windows/system":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/System.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["System"],"fields":["Channel","EventID","Caption"]},"*/windows/taskscheduler":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-TaskScheduler%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-TaskScheduler/Operational"],"fields":["Channel","EventID"]},"*/windows/terminalservices-localsessionmanager":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-TerminalServices-LocalSessionManager/Operational"],"fields":["Channel","EventID","Address"]},"*/windows/vhdmp":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-VHDMP%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-VHDMP/Operational"],"fields":["EventID","VhdType","Channel"]},"*/windows/windefend":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Windows Defender/Operational"],"fields":["Channel","EventID","SeverityID","ThreatName"]},"*/windows/wmi":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-WMI-Activity%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-WMI-Activity/Operational"],"fields":["Channel","EventID"]},"process_creation/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n  AND System.EventID.Value = 1 OR System.EventID.Value = 4688\n","fields":["Channel","EventID"]},"ps_classic_provider_start/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 600\n","fields":["Channel","EventID"]},"ps_classic_start/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Windows PowerShell.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 400\n","fields":["Channel","EventID"]},"ps_module/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 4103\n","fields":["Channel","EventID"]},"ps_script/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 4104\n","fields":["Channel","EventID"]},"registry_add/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime AND System.EventID.Value = 12 OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"registry_event/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n  AND System.EventID.Value IN (12, 13, 14) OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"registry_set/windows/*":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n  AND System.EventID.Value = 13 OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"antivirus/windows/windefend":{"query":"SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp, *\nFROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\nWHERE Timestamp \u003e= DateAfterTime AND Timestamp \u003c= DateBeforeTime\n","channel":["Microsoft-Windows-Windows Defender/Operational"],"fields":["Channel","EventID"]}},"ExportTemplate":"export: |\n  LET X = scope()\n\n  LET DateAfterTime \u003c= X.DateAfter || timestamp(epoch=\"1600-01-01\")\n  LET DateBeforeTime \u003c= X.DateBefore || timestamp(epoch=\"2200-01-01\")\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=X.RuleStatus || \"All Rules\")\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `Critical, High, Medium, and Low`=\"critical|high|medium|low|default\",\n       `All`=\".\"), member=X.RuleLevel || \"All\")\n\n  LET MandatoryLabelLookup \u003c= dict(\n      `S-1-16-0`= 'UNTRUSTED',\n      `S-1-16-4096`= 'LOW_INTEGRITY',\n      `S-1-16-8192`= 'MEDIUM_INTEGRITY',\n      `S-1-16-8448`= 'MEDIUM_HIGH_INTEGRITY',\n      `S-1-16-12288`= 'HIGH_INTEGRITY',\n      `S-1-16-16384`= 'SYSTEM_INTEGRITY',\n      `S-1-16-20480`= 'PROTECTED_PROCESS')\n\n  LET TokenElevationTypeLookup \u003c= dict(\n      `%%1936`= 'FULL_TOKEN',\n      `%%1937`= 'ELEVATED_TOKEN',\n      `%%1938`= 'LIMITED_TOKEN')\n\n  // Helpers for VQL rules\n  LET FetchKeyValues(OSPath) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n  })\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n\n  -- The Keywords field is actually not very useful but it trips\n  -- Elastic so we remove it.\n  -- https://github.com/Velocidex/velociraptor/issues/3856\n  LET SystemMask \u003c= dict(Keywords=TRUE)\n","QueryTemplate":"sources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System - SystemMask,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         _Match, *\n   FROM sigma(\n     rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=RuleFilterLambda,\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details, _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","ImportConfigs":["config/base_doc.yaml"]},"Windows.Sigma.Base.CaptureTestSet":{"Name":"Windows.Sigma.Base.CaptureTestSet","Preamble":"name: Windows.Sigma.Base.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    {{- range .ImportedLogSources }}\n    - \"{{ .Name }}\"\n    {{- end }}\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Windows.Sigma.Base\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n\n- query: |\n    SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources, then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    })\n","ImportConfigs":["config/windows_base.yaml"]},"Windows.Sigma.Base.ReplayTestSet":{"Name":"Windows.Sigma.Base.ReplayTestSet","Preamble":"name: Windows.Sigma.Base.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.Base\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    SELECT  _Rule.Title AS Rule ,\n      Details,\n      dict(System=System,\n           EventData=X.EventData || X.UserData,\n           Message=X.Message) AS Event,\n      _Match AS Match\n\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n","ImportConfigs":["config/windows_base.yaml"]},"Windows.Sigma.BaseEvents":{"Name":"Windows.Sigma.BaseEvents","Description":"# Windows.Sigma.BaseEvents Model\n\nSigma Model for live monitoring of Windows systems based on local\nevent logs.\n\nThis is a real time monitoring profile which allows live monitoring\nof Windows systems using Sigma rules. This profile only covers event\nlogs by following the EVTX files.\n\nFor more dynamic event monitoring see the Windows.Sigma.ETWBase\nartifact which uses ETW as the monitoring mechanism.\n\nThis model is mostly compatible with the standard ruleset available\nfrom SigmaHQ, Hayabusa etc.\n","Preamble":"name: Windows.Sigma.BaseEvents\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Windows.\n\n  This artifact was built on {{ .Time }}\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: ROOT\n    description: The Event Log Directory we use to read all logs\n    default: C:/Windows/System32/WinEvt/Logs/\n\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is 10 Min).\n    default: \"600\"\n\n  - name: EVTX_FREQUENCY\n    type: int\n    default: 60\n    description: |\n      How often in seconds to check for event log changes. Lower\n      number means more real time detection but potentially higher\n      CPU utilization.\n","FieldMappings":{"":"x=\u003eserialize(item=x.EventData)","AccessList":"x=\u003ex.EventData.AccessList","AccessMask":"x=\u003ex.EventData.AccessMask","AccessReason":"x=\u003ex.EventData.AccessReason","Accesses":"x=\u003ex.EventData.Accesses","AccountDomain":"x=\u003ex.EventData.AccountDomain","AccountExpires":"x=\u003ex.EventData.AccountExpires","AccountName":"x=\u003ex.EventData.AccountName","Account_Name":"x=\u003ex.EventData.Account_Name","Action":"x=\u003ex.EventData.Action","ActionName":"x=\u003ex.EventData.ActionName","AdditionalInfo":"x=\u003ex.EventData.AdditionalInfo","Address":"x=\u003ex.EventData.Address","AllowedToDelegateTo":"x=\u003ex.EventData.AllowedToDelegateTo","AppID":"x=\u003ex.EventData.AppID","AppName":"x=\u003ex.EventData.Data[0]","AppVersion":"x=\u003ex.EventData.AppVersion","Application":"x=\u003ex.EventData.Application","ApplicationPath":"x=\u003ex.EventData.ApplicationPath","AttributeLDAPDisplayName":"x=\u003ex.EventData.AttributeLDAPDisplayName","AttributeValue":"x=\u003ex.EventData.AttributeValue","AuditPolicyChanges":"x=\u003ex.EventData.AuditPolicyChanges","AuditSourceName":"x=\u003ex.EventData.AuditSourceName","AuthenticationPackageName":"x=\u003ex.EventData.AuthenticationPackageName","Binary":"x=\u003ex.EventData.Binary","BootMode":"x=\u003ex.EventData.BootMode","CallTrace":"x=\u003ex.EventData.CallTrace","CallerProcessName":"x=\u003ex.EventData.CallerProcessName","Caller_Process_Name":"x=\u003ex.EventData.Caller_Process_Name","CallingProcessName":"x=\u003ex.EventData.CallingProcessName","Caption":"x=\u003ex.EventData.Caption","CategoryId":"x=\u003ex.EventData.CategoryId","CategoryName":"x=\u003ex.EventData.`Category Name`","CertThumbprint":"x=\u003ex.EventData.CertThumbprint","Channel":"x=\u003ex.System.Channel","ClassName":"x=\u003ex.EventData.ClassName","ClientAddress":"x=\u003ex.EventData.ClientAddress","ClientInfo":"x=\u003ex.EventData.ClientInfo","ClientName":"x=\u003ex.EventData.ClientName","ClientProcessId":"x=\u003ex.EventData.ClientProcessId","Client_Address":"x=\u003ex.EventData.Client_Address","CommandLine":"x=\u003ex.EventData.CommandLine || x.CommandLine","Company":"x=\u003ex.EventData.Company","CompatibleIds":"x=\u003ex.EventData.CompatibleIds","Computer":"x=\u003ex.System.Computer","ComputerName":"x=\u003ex.System.Computer","Configuration":"x=\u003ex.EventData.Configuration","Consumer":"x=\u003ex.EventData.Consumer","Contents":"x=\u003ex.EventData.Contents","ContextInfo":"x=\u003ex.EventData.ContextInfo","CountOfCredentialsReturned":"x=\u003ex.EventData.CountOfCredentialsReturned","CreationUtcTime":"x=\u003ex.EventData.CreationUtcTime","CurrentDirectory":"x=\u003ex.EventData.CurrentDirectory","Data":"x=\u003eserialize(item=x.EventData)","Description":"x=\u003ex.EventData.Description","DestAddress":"x=\u003ex.EventData.DestAddress","DestPort":"x=\u003ex.EventData.DestPort","Destination":"x=\u003ex.EventData.Destination","DestinationAddress":"x=\u003ex.EventData.DestinationAddress","DestinationHostname":"x=\u003ex.EventData.DestinationHostname","DestinationIp":"x=\u003ex.EventData.DestinationIp","DestinationIsIpv6":"x=\u003ex.EventData.DestinationIsIpv6","DestinationPort":"x=\u003ex.EventData.DestinationPort","Details":"x=\u003ex.EventData.Details","DetectionSource":"x=\u003ex.EventData.DetectionSource","DetectionUser":"x=\u003ex.EventData.`Detection User`","Device":"x=\u003ex.EventData.Device","DeviceClassName":"x=\u003ex.EventData.DeviceClassName","DeviceDescription":"x=\u003ex.EventData.DeviceDescription","DeviceId":"x=\u003ex.EventData.DeviceId","DeviceInstanceID":"x=\u003ex.UserData.InstallDeviceID.DeviceInstanceID","DeviceName":"x=\u003ex.EventData.DeviceName","Direction":"x=\u003ex.EventData.Direction","DisplayName":"x=\u003ex.EventData.DisplayName","DomainName":"x=\u003ex.EventData.SubjectDomainName","DriveName":"x=\u003ex.EventData.DriveName","DriverDescription":"x=\u003ex.UserData.InstallDeviceID.DriverDescription","DriverProvider":"x=\u003ex.UserData.InstallDeviceID.DriverProvider","DvrFmwk2003InstanceId":"x=\u003ex.UserData.UMDFHostDeviceArrivalBegin.InstanceId","DvrFmwkInstanceId":"x=\u003ex.UserData.UMDFHostDeviceRequest.InstanceId","ETWFileName":"x=\u003ex.EventData.FileName","EngineVersion":"x=\u003ex.EventData.EngineVersion","ErrorCode":"x=\u003ex.EventData.ErrorCode","EventID":"x=\u003ex.System.EventID.Value","EventNamespace":"x=\u003ex.EventData.EventNamespace","EventSourceId":"x=\u003ex.EventData.EventSourceId","EventType":"x=\u003ex.System.EventType","ExceptionCode":"x=\u003ex.EventData.ExceptionCode","ExecutionProcessID":"x=\u003ex.System.Execution.ProcessID","FailureCode":"x=\u003ex.EventData.FailureCode","FailureReason":"x=\u003ex.EventData.FailureReason","Feature_Name":"x=\u003ex.EventData.`Feature Name`","FileMagicBytes":"x=\u003ex.EventData.FileMagicBytes","FileName":"x=\u003ex.EventData.FileName","FileNameBuffer":"x=\u003ex.EventData.FileNameBuffer","FilePath":"x=\u003ex.EventData.FilePath","FileVersion":"x=\u003ex.EventData.FileVersion","Filename":"x=\u003ex.EventData.Filename","Filter":"x=\u003ex.EventData.Filter","FilterName":"x=\u003ex.EventData.FilterName","FilterOrigin":"x=\u003ex.EventData.FilterOrigin","GrandParentImage":"x=\u003ex.EventData.GrandParentImage","GrantedAccess":"x=\u003ex.EventData.GrantedAccess","GroupName":"x=\u003ex.EventData.GroupName","GroupSid":"x=\u003ex.EventData.GroupSid","HandleId":"x=\u003ex.EventData.HandleId","Hash":"x=\u003ex.EventData.Hash","Hashes":"x=\u003ex.EventData.Hashes","HiveName":"x=\u003ex.EventData.HiveName","HomeDirectory":"x=\u003ex.EventData.HomeDirectory","HomePath":"x=\u003ex.EventData.HomePath","HostApplication":"x=\u003ex.EventData.HostApplication","HostName":"x=\u003ex.EventData.HostName","HostVersion":"x=\u003ex.EventData.HostVersion","ID":"x=\u003ex.EventData.ID","Image":"x=\u003ex.EventData.Image","ImageLoaded":"x=\u003ex.EventData.ImageLoaded","ImageName":"x=\u003ex.EventData.ImageName","ImagePath":"x=\u003ex.EventData.ImagePath","ImpersonationLevel":"x=\u003ex.EventData.ImpersonationLevel","Imphash":"x=\u003ex.EventData.Hashes","Initiated":"x=\u003ex.EventData.Initiated","InstallStatus":"x=\u003ex.UserData.InstallDeviceID.InstallStatus","InstanceID":"x=\u003ex.UserData.UMDFHostDeviceArrivalBegin.InstanceId","InstanceId":"x=\u003ex.EventData.InstanceId","IntegrityLevel":"x=\u003ex.EventData.IntegrityLevel","IpAddress":"x=\u003ex.EventData.IpAddress","IpPort":"x=\u003ex.EventData.IpPort","JobTitle":"x=\u003ex.EventData.name","KeyLength":"x=\u003ex.EventData.KeyLength","Keywords":"x=\u003ex.System.Keywords","LDAPDisplayName":"x=\u003ex.EventData.LDAPDisplayName","LayerRTID":"x=\u003ex.EventData.LayerRTID","Level":"x=\u003ex.System.Level","LocalAddresses":"x=\u003ex.EventData.LocalAddresses","LocalName":"x=\u003ex.EventData.LocalName","LocalPorts":"x=\u003ex.EventData.LocalPorts","LocationInformation":"x=\u003ex.EventData.LocationInformation","LogFileClearedChannel":"x=\u003ex.UserData.LogFileCleared.Channel","LogFileClearedSubjectUserName":"x=\u003ex.UserData.LogFileCleared.SubjectUserName","LogonGuid":"x=\u003ex.EventData.LogonGuid","LogonHours":"x=\u003ex.EventData.LogonHours","LogonID":"x=\u003ex.EventData.LogonId","LogonId":"x=\u003ex.EventData.LogonId","LogonProcessName":"x=\u003ex.EventData.LogonProcessName","LogonType":"x=\u003ex.EventData.LogonType","Logon_Account":"x=\u003ex.EventData.Logon_Account","Logon_Type":"x=\u003ex.EventData.LogonType","MachineName":"x=\u003ex.EventData.MachineName","MandatoryLabel":"x=\u003eget(item=MandatoryLabelLookup, member=x.EventData.MandatoryLabel || \"-\")\n","MasterKeyId":"x=\u003ex.EventData.MasterKeyId","MemberName":"x=\u003ex.EventData.MemberName","MemberSid":"x=\u003ex.EventData.MemberSid","Message":"x=\u003ex.EventData","ModifyingApplication":"x=\u003ex.EventData.ModifyingApplication","ModifyingUser":"x=\u003ex.EventData.ModifyingUser","Module":"x=\u003ex.EventData.Module","Name":"x=\u003ex.EventData.Name","NewDefaultPrinter":"x=\u003ex.EventData.NewDefaultPrinter","NewName":"x=\u003ex.EventData.NewName","NewProcessId":"x=\u003ex.EventData.NewProcessId","NewProcessName":"x=\u003ex.EventData.NewProcessName","NewTargetUserName":"x=\u003ex.EventData.NewTargetUserName","NewTemplateContent":"x=\u003e x.EventData.NewTemplateContent","NewTime":"x=\u003ex.EventData.NewTime","NewUacValue":"x=\u003ex.EventData.NewUacValue","NewValue":"x=\u003ex.EventData.NewValue","New_Value":"x=\u003ex.EventData.`New Value`","ObjectClass":"x=\u003ex.EventData.ObjectClass","ObjectDN":"x=\u003ex.EventData.ObjectDN","ObjectName":"x=\u003ex.EventData.ObjectName","ObjectServer":"x=\u003ex.EventData.ObjectServer","ObjectType":"x=\u003ex.EventData.ObjectType","ObjectValueName":"x=\u003ex.EventData.ObjectValueName","OldDefaultPrinter":"x=\u003ex.EventData.OldDefaultPrinter","OldTargetUserName":"x=\u003ex.EventData.OldTargetUserName","OldUacValue":"x=\u003ex.EventData.OldUacValue","OldValue":"x=\u003ex.EventData.OldValue","Operation":"x=\u003ex.EventData.Operation","OperationEssStartedNamespaceName":"x=\u003ex.UserData.Operation_EssStarted.NamespaceName","OperationEssStartedPossibleCause":"x=\u003ex.UserData.Operation_EssStarted.PossibleCause","OperationEssStartedProcessid":"x=\u003ex.UserData.Operation_EssStarted.Processid","OperationEssStartedProvider":"x=\u003ex.UserData.Operation_EssStarted.Provider","OperationEssStartedQuery":"x=\u003ex.UserData.Operation_EssStarted.Query","OperationEssStartedUser":"x=\u003ex.UserData.Operation_EssStarted.User","OperationType":"x=\u003ex.EventData.OperationType","Origin":"x=\u003ex.EventData.Origin","OriginalFileName":"x=\u003ex.EventData.OriginalFileName","OriginalFilename":"x=\u003ex.EventData.OriginalFileName","PID":"x=\u003ex.EventData.PID","PackageFullName":"x=\u003ex.UserData.PackageFullName","PackagePath":"x=\u003ex.EventData.PackagePath","Param1":"x=\u003ex.EventData.Param1","Param2":"x=\u003ex.EventData.Param2","Param3":"x=\u003ex.EventData.Param3","ParentCommandLine":"x=\u003ex.EventData.ParentCommandLine","ParentImage":"x=\u003ex.EventData.ParentImage","ParentIntegrityLevel":"x=\u003ex.EventData.ParentIntegrityLevel","ParentOfParentImage":"x=\u003ex.EventData.ParentOfParentImage","ParentProcessGuid":"x=\u003ex.EventData.ParentProcessGuid","ParentProcessId":"x=\u003ex.EventData.ParentProcessId","ParentProcessName":"x=\u003ex.EventData.ParentProcessName","ParentUser":"x=\u003ex.EventData.ParentUser","PasswordLastSet":"x=\u003ex.EventData.PasswordLastSet","Path":"x=\u003ex.EventData.Path","Payload":"x=\u003ex.EventData.Payload","PipeName":"x=\u003ex.EventData.PipeName","PossibleCause":"x=\u003ex.UserData.PossibleCause","PreAuthType":"x=\u003ex.EventData.PreAuthType","PreviousCreationUtcTime":"x=\u003ex.EventData.PreviousCreationUtcTime","PreviousTime":"x=\u003ex.EventData.PreviousTime","PrimaryGroupId":"x=\u003ex.EventData.PrimaryGroupId","PrinterCreated":"x=\u003ex.EventData.PrinterCreated","PrinterDeletionPending":"x=\u003ex.EventData.PrinterDeletionPending","PrinterName":"x=\u003ex.EventData.PrinterName","PrivilegeList":"x=\u003ex.EventData.PrivilegeList","ProcessCommandLine":"x=\u003ex.EventData.ProcessCommandLine || x.EventData.ProcInfo.CommandLine","ProcessExe":"x=\u003ex.EventData.ProcInfo.Exe","ProcessGuid":"x=\u003ex.EventData.ProcessGuid","ProcessID":"x=\u003ex.EventData.ProcessID","ProcessId":"x=\u003ex.EventData.ProcessId","ProcessName":"x=\u003ex.EventData.ProcessName || x.EventData.ProcInfo.Name","ProcessNameBuffer":"x=\u003ex.EventData.ProcessNameBuffer","ProcessPath":"x=\u003ex.EventData.ProcessPath","Product":"x=\u003ex.EventData.Product","ProfilePath":"x=\u003ex.EventData.ProfilePath","Profiles":"x=\u003ex.EventData.Profiles","Properties":"x=\u003ex.EventData.Properties","Protocol":"x=\u003ex.EventData.Protocol","Provider":"x=\u003ex.UserData.Provider","ProviderContextName":"x=\u003ex.EventData.ProviderContextName","ProviderName":"x=\u003ex.System.Provider.Name","Provider_Name":"x=\u003ex.System.Provider.Name","QNAME":"x=\u003ex.EventData.QNAME","Query":"x=\u003ex.UserData.Query","QueryName":"x=\u003ex.EventData.QueryName","QueryResults":"x=\u003ex.EventData.QueryResults","QueryStatus":"x=\u003ex.EventData.QueryStatus","ReadOnly":"x=\u003ex.EventData.ReadOnly","ReadOperation":"x=\u003ex.EventData.ReadOperation","Reason":"x=\u003ex.EventData.Reason","RecoveryKeyId":"x=\u003ex.EventData.RecoveryKeyId","RecoveryServer":"x=\u003ex.EventData.RecoveryServer","RelativeTargetName":"x=\u003ex.EventData.RelativeTargetName","RemoteAddresses":"x=\u003ex.EventData.RemoteAddresses","RemoteMachineID":"x=\u003ex.EventData.RemoteMachineID","RemoteName":"x=\u003ex.EventData.RemoteName","RemotePorts":"x=\u003ex.EventData.RemotePorts","RemoteUserID":"x=\u003ex.EventData.RemoteUserID","RequestedPolicy":"x=\u003ex.EventData.RequestedPolicy","ReturnCode":"x=\u003ex.EventData.ReturnCode","RuleName":"x=\u003ex.EventData.RuleName","SAMAccountName":"x=\u003ex.EventData.SamAccountName","SamAccountName":"x=\u003ex.EventData.SamAccountName","SchemaVersion":"x=\u003ex.EventData.SchemaVersion","ScriptBlockText":"x=\u003ex.EventData.ScriptBlockText","ScriptPath":"x=\u003ex.EventData.ScriptPath","SearchFilter":"x=\u003ex.System.SearchFilter","SecurityUserID":"x=\u003ex.System.Security.UserID","ServerAddress":"x=\u003ex.EventData.ServerAddress","ServerName":"x=\u003ex.System.ServerName","Service":"x=\u003ex.EventData.Service","ServiceAccount":"x=\u003ex.EventData.ServiceAccount","ServiceFileName":"x=\u003ex.EventData.ServiceFileName","ServiceName":"x=\u003ex.EventData.ServiceName","ServicePrincipalNames":"x=\u003ex.EventData.ServicePrincipalNames","ServiceStartType":"x=\u003ex.EventData.ServiceStartType","ServiceType":"x=\u003ex.EventData.ServiceType","SettingType":"x=\u003ex.EventData.SettingType","SettingValueString":"x=\u003ex.EventData.SettingValueString","SeverityID":"x=\u003ex.EventData.`Severity ID`","SeverityName":"x=\u003ex.EventData.`Severity Name`","ShareLocalPath":"x=\u003ex.EventData.ShareLocalPath","ShareName":"x=\u003ex.EventData.ShareName","SidHistory":"x=\u003ex.EventData.SidHistory","SidList":"x=\u003ex.EventData.SidList","Signature":"x=\u003ex.EventData.Signature","SignatureStatus":"x=\u003ex.EventData.SignatureStatus","Signed":"x=\u003ex.EventData.Signed","Source":"x=\u003ex.System.Provider_Name","SourceAddress":"x=\u003ex.EventData.SourceAddress","SourceCommandLine":"x=\u003ex.EventData.SourceCommandLine","SourceHostname":"x=\u003ex.EventData.SourceHostname","SourceImage":"x=\u003ex.EventData.SourceImage","SourceIp":"x=\u003ex.EventData.SourceIp","SourceIsIpv6":"x=\u003ex.EventData.SourceIsIpv6","SourceName":"x=\u003ex.EventData.SourceName","SourceNetworkAddress":"x=\u003ex.EventData.SourceNetworkAddress","SourceParentImage":"x=\u003ex.EventData.SourceParentImage","SourcePort":"x=\u003ex.EventData.SourcePort","SourceProcessGUID":"x=\u003ex.EventData.SourceProcessGUID","SourceProcessGuid":"x=\u003ex.EventData.SourceProcessGuid","SourceProcessId":"x=\u003ex.EventData.SourceProcessId","SourceSid":"x=\u003ex.EventData.SourceSid","SourceUser":"x=\u003ex.EventData.SourceUser","SourceUserName":"x=\u003ex.EventData.SourceUserName","Source_Name":"x=\u003ex.EventData.`Source Name`","Source_Network_Address":"x=\u003ex.EventData.Source_Network_Address","Source_WorkStation":"x=\u003ex.EventData.Source_WorkStation","StartAddress":"x=\u003ex.EventData.StartAddress","StartFunction":"x=\u003ex.EventData.StartFunction","StartModule":"x=\u003ex.EventData.StartModule","StartType":"x=\u003ex.EventData.StartType","State":"x=\u003ex.EventData.State","Status":"x=\u003ex.EventData.Status","SubStatus":"x=\u003ex.EventData.SubStatus","SubcategoryGuid":"x=\u003ex.EventData.SubcategoryGuid","SubcategoryId":"x=\u003ex.EventData.SubcategoryId","SubjectDomainName":"x=\u003ex.EventData.SubjectDomainName","SubjectLogonId":"x=\u003ex.EventData.SubjectLogonId","SubjectUserName":"x=\u003ex.EventData.SubjectUserName","SubjectUserSid":"x=\u003ex.EventData.SubjectUserSid","SysmonVersion":"x=\u003ex.EventData.SysmonVersion","TargetDomainName":"x=\u003ex.EventData.TargetDomainName","TargetFilename":"x=\u003ex.EventData.TargetFilename","TargetImage":"x=\u003ex.EventData.TargetImage","TargetInfo":"x=\u003ex.EventData.TargetInfo","TargetLogonId":"x=\u003ex.EventData.TargetLogonId","TargetName":"x=\u003ex.EventData.TargetName","TargetObject":"x=\u003ex.EventData.TargetObject","TargetOutboundUserName":"x=\u003ex.EventData.TargetOutboundUserName","TargetParentProcessId":"x=\u003ex.EventData.TargetParentProcessId","TargetProcessAddress":"x=\u003ex.EventData.TargetProcessAddress","TargetProcessGUID":"x=\u003ex.EventData.TargetProcessGUID","TargetProcessGuid":"x=\u003ex.EventData.TargetProcessGUID","TargetProcessId":"x=\u003ex.EventData.TargetProcessId","TargetServerName":"x=\u003ex.EventData.TargetServerName","TargetSid":"x=\u003ex.EventData.TargetSid","TargetUser":"x=\u003ex.EventData.TargetUser","TargetUserName":"x=\u003ex.EventData.TargetUserName","TargetUserSid":"x=\u003ex.EventData.TargetUserSid","TaskContent":"x=\u003ex.EventData.TaskContent","TaskContentNew":"x=\u003ex.EventData.TaskContentNew","TaskDate":"x=\u003ex.EventData.TaskContent","TaskName":"x=\u003ex.EventData.TaskName","TemplateContent":"x=\u003ex.EventData.TemplateContent","ThreatName":"x=\u003ex.EventData.`Threat Name`","TicketEncryptionType":"x=\u003ex.EventData.TicketEncryptionType","TicketOptions":"x=\u003ex.EventData.TicketOptions","Timestamp":"x=\u003ex.System.TimeCreated.SystemTime","TokenElevationType":"x=\u003eget(item=TokenElevationTypeLookup, member=x.EventData.TokenElevationType || \"-\")","Type":"x=\u003ex.EventData.Type","Url":"x=\u003ex.EventData.url","User":"x=\u003ex.EventData.User","UserAccountControl":"x=\u003ex.EventData.UserAccountControl","UserContext":"x=\u003ex.EventData.UserContext","UserDataAddress":"x=\u003ex.UserData.EventXML.Address","UserDataCode":"x=\u003ex.UserData.Operation_StartedOperational.Code","UserDataConsumer":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.CONSUMER","UserDataESS":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.ESS","UserDataHostProcess":"x=\u003ex.UserData.Operation_StartedOperational.HostProcess","UserDataNamespace":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.Namespace","UserDataNamespaceName":"x=\u003ex.UserData.Operation_TemporaryEssStarted.NamespaceName","UserDataParam1":"x=\u003ex.UserData.EventXML.Param1","UserDataParam2":"x=\u003ex.UserData.EventXML.Param2","UserDataParam3":"x=\u003ex.UserData.EventXML.Param3","UserDataPossibleCause":"x=\u003ex.UserData.Operation_ESStoConsumerBinding.PossibleCause","UserDataProcessID":"x=\u003ex.UserData.Operation_StartedOperational.ProcessID","UserDataProcessid":"x=\u003ex.UserData.Operation_TemporaryEssStarted.Processid","UserDataProviderName":"x=\u003ex.UserData.Operation_StartedOperational.ProviderName","UserDataProviderPath":"x=\u003ex.UserData.Operation_StartedOperational.ProviderPath","UserDataQuery":"x=\u003ex.UserData.Operation_TemporaryEssStarted.Query","UserDataSessionID":"x=\u003ex.UserData.EventXML.SessionID","UserDataUser":"x=\u003ex.UserData.EventXML.User","UserName":"x=\u003ex.EventData.UserName","UserParameters":"x=\u003ex.EventData.UserParameters","UserPrincipalName":"x=\u003ex.EventData.UserPrincipalName","UserWorkstations":"x=\u003ex.EventData.UserWorkstations","Value":"x=\u003ex.EventData.Value","Version":"x=\u003ex.System.Version","VhdFile":"x=\u003ex.EventData.VhdFile","VhdType":"x=\u003ex.EventData.VhdType","WindowsDefenderProcessName":"x=\u003ex.EventData.`Process Name`","Workstation":"x=\u003ex.EventData.Workstation","WorkstationName":"x=\u003ex.EventData.WorkstationName","image":"x=\u003ex.EventData.Image","jobId":"x=\u003ex.EventData.jobId","jobOwner":"x=\u003ex.EventData.jobOwner","jobTitle":"x=\u003ex.EventData.jobTitle","md5":"x=\u003eparse_string_with_regex(string=x.EventData.Hash || '', regex='MD5=([^,]+)').g1","param1":"x=\u003ex.EventData.param1","param2":"x=\u003ex.EventData.param2","param3":"x=\u003ex.EventData.param3","param4":"x=\u003ex.EventData.param4","param5":"x=\u003ex.EventData.param5","payload":"x=\u003ex.EventData.payload","process":"x=\u003ex.EventData.Process","processPath":"x=\u003ex.EventData.processPath","query":"x=\u003ex.EventData.Query","service":"x=\u003ex.EventData.Service","sha1":"x=\u003ex.EventData.Hashes","sha256":"x=\u003eparse_string_with_regex(string=x.EventData.Hash || '', regex='SHA256=([^,]+)').g1","subjectName":"x=\u003ex.EventData.SubjectName"},"DefaultDetails":{"Query":"x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData\n","Lookup":{"MSExchange CmdletLogs/6":"Data: %Data%","Microsoft-Windows-Bits-Client/3":"JobTitle: %jobTitle% ¦ JobID: %jobId% ¦ JobOwner: %jobOwner% ¦ Proc: %processPath% ¦ PID: %ProcessId%","Microsoft-Windows-DNS-Server-Service/150":"DLL: %param1%","Microsoft-Windows-DNS-Server-Service/770":"Path: %param1% ¦ SrcComp: %param2%","Microsoft-Windows-DriverFrameworks-UserMode/2003":"Device: %DvrFmwk2003InstanceId%","Microsoft-Windows-DriverFrameworks-UserMode/2100":"Device: %DvrFmwkInstanceId%","Microsoft-Windows-DriverFrameworks-UserMode/2102":"Device: %DvrFmwkInstanceId%","Microsoft-Windows-Ntfs/98":"Drive: %DriveName% ¦ Device: %DeviceName%","Microsoft-Windows-PowerShell/4103":"Payload: %Payload%","Microsoft-Windows-PowerShell/4104":"ScriptBlock: %ScriptBlockText%","Microsoft-Windows-PrintService/300":"PrinterCreated: %PrinterCreated%","Microsoft-Windows-PrintService/301":"DeletedPrinter: %Param1%","Microsoft-Windows-PrintService/302":"PrinterDeletionPending: %PrinterDeletionPending%","Microsoft-Windows-PrintService/354":"Printer: %Param1% ¦ DLL: %Param2% ¦ Error: %Param3%","Microsoft-Windows-PrintService/823":"OldDefaultPrinter: %OldDefaultPrinter% ¦ NewDefaultPrinter: %NewDefaultPrinter% ¦ Status: %Status% ¦ Module: %Module%","Microsoft-Windows-PrintService/848":"PrinterName: %PrinterName% ¦ ShareName: %ShareName%","Microsoft-Windows-PrintService/849":"PrinterName: %PrinterName% ¦ ShareName: %ShareName%","Microsoft-Windows-Security-Auditing/1102":"User: %LogFileClearedSubjectUserName%","Microsoft-Windows-Security-Auditing/4616":"PrevTime: %PreviousTime% ¦ NewTime: %NewTime% ¦ User: %SubjectUserName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4624":"Type: %LogonType% ¦ TgtUser: %TargetUserName% ¦ SrcComp: %WorkstationName% ¦ SrcIP: %IpAddress% ¦ LID: %TargetLogonId%","Microsoft-Windows-Security-Auditing/4625":"Type: %LogonType% ¦ TgtUser: %TargetUserName% ¦ SrcComp: %WorkstationName% ¦ SrcIP: %IpAddress% ¦ AuthPkg: %AuthenticationPackageName% ¦ Proc: %ProcessName%","Microsoft-Windows-Security-Auditing/4648":"TgtUser: %TargetUserName% ¦ SrcUser: %SubjectUserName% ¦ SrcIP: %IpAddress% ¦ Proc: %ProcessName% ¦ TgtSvr: %TargetInfo%","Microsoft-Windows-Security-Auditing/4656":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ ObjType: %ObjectType% ¦ AccessReason: %AccessReason% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4661":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjType: %ObjectType% ¦ ObjName: %ObjectName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4662":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ OpType: %OperationType% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4663":"User: %SubjectUserName% ¦ ObjSvr: %ObjectServer% ¦ ObjName: %ObjectName% ¦ ObjType: %ObjectType% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ HID: %HandleId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4672":"TgtUser: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4673":"Proc: %ProcessName% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4674":"Svc: %ObjectName% ¦ User: %SubjectUserName% ¦ AccessMask: %AccessMask% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4688":"Cmdline: %CommandLine% ¦ Proc: %NewProcessName% ¦ PID: %NewProcessId% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4692":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ MasterKeyId: %MasterKeyId% ¦ RecoveryServer: %RecoveryServer% ¦ RecoveryKeyId: %RecoveryKeyId% ¦ FailureReason: %FailureReason%","Microsoft-Windows-Security-Auditing/4697":"Svc: %ServiceName% ¦ Path: %ServiceFileName% ¦ User: %SubjectUserName% ¦ SvcAcct: %ServiceAccount% ¦ SvcType: %ServiceType% ¦ SvcStartType: %ServiceStartType% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4698":"Name: %TaskName% ¦ Content: %TaskContent% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4699":"Name: %TaskName% ¦ User: %SubjectUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4719":"User: %SubjectUserName% ¦ AuditPolicyChanges: %AuditPolicyChanges% ¦ CategoryId: %CategoryId% ¦ SubcategoryGuid: %SubcategoryGuid% ¦ SubcategoryId: %SubcategoryId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4720":"TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid%","Microsoft-Windows-Security-Auditing/4728":"SrcSID: %MemberSid% ¦ TgtGrp: %TargetUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4732":"SrcSID: %MemberSid% ¦ TgtGrp: %TargetUserName% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4738":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ SamUser: %SamAccountName% ¦ DisplayName: %DisplayName% ¦ UAC: %UserAccountControl% ¦ OldUAC: %OldUacValue% ¦ NewUAC: %NewUacValue% ¦ AcctExpires: %AccountExpires% ¦ AllowedToDelegateTo: %AllowedToDelegateTo% ¦ HomeDir: %HomeDirectory% ¦ HomePath: %HomePath% ¦ LogonHours: %LogonHours% ¦  PwLastSet: %PasswordLastSet% ¦ PrimaryGrpID: %PrimaryGroupId% ¦ PrivList: %PrivilegeList% ¦ ProfilePath: %ProfilePath% ¦ ScriptPath: %ScriptPath% ¦ SidHistory: %SidHistory% ¦ UserParams: %UserParameters% ¦ UPN: %UserPrincipalName% ¦ SrcComp: %UserWorkstations% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4742":"SPN: %ServicePrincipalNames% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ SamUser: %SamAccountName% ¦ DisplayName: %DisplayName% ¦ UAC: %UserAccountControl% ¦ OldUAC: %OldUacValue% ¦ NewUAC: %NewUacValue% ¦ AcctExpires: %AccountExpires% ¦ AllowedToDelegateTo: %AllowedToDelegateTo% ¦ HomeDir: %HomeDirectory% ¦ HomePath: %HomePath% ¦ LogonHours: %LogonHours% ¦  PwLastSet: %PasswordLastSet% ¦ PrimaryGrpID: %PrimaryGroupId% ¦ PrivList: %PrivilegeList% ¦ ProfilePath: %ProfilePath% ¦ ScriptPath: %ScriptPath% ¦ SidHistory: %SidHistory% ¦ UserParams: %UserParameters% ¦ UPN: %UserPrincipalName% ¦ SrcComp: %UserWorkstations% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4765":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ SrcUser: %SourceUserName% ¦ SrcSID: %SourceSid% ¦ TgtUser: %TargetUserName% ¦ TgtSID: %TargetSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ PrivList: %PrivilegeList% ¦ SidList: %SidList% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4768":"TgtUser: %TargetUserName% ¦ Svc: %ServiceName% ¦ SrcIP: %IpAddress% ¦ Status: %Status% ¦ PreAuthType: %PreAuthType%","Microsoft-Windows-Security-Auditing/4769":"TgtUser: %TargetUserName% ¦ Svc: %ServiceName% ¦ SrcIP: %IpAddress% ¦ Status: %Status%","Microsoft-Windows-Security-Auditing/4776":"TgtUser: %TargetUserName% ¦ SrcComp: %Workstation% ¦ Status: %Status%","Microsoft-Windows-Security-Auditing/4778":"SrcUser: %AccountName% ¦ Domain: %AccountDomain% ¦ SrcIP: %ClientAddress% ¦ SrcComp: %ClientName% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4779":"SrcUser: %AccountName% ¦ Domain: %AccountDomain% ¦ SrcIP: %ClientAddress% ¦ SrcComp: %ClientName% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4781":"OldTgtUser: %OldTargetUserName% ¦ NewTgtUser: %NewTargetUserName% ¦ TgtSID: %TargetSid% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ TgtDomain: %TargetDomainName% ¦ PrivList: %PrivilegeList% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4794":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ Status: %Status% ¦ SrcComp: %Workstation% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4825":"Domain: %AccountDomain% ¦ User: %AccountName% ¦ SrcIP: %ClientAddress% ¦ LID: %LogonID%","Microsoft-Windows-Security-Auditing/4904":"AuditSrcName: %AuditSourceName% ¦ EventSrcID: %EventSourceId% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Domain: %SubjectDomainName% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/4905":"AuditSrcName: %AuditSourceName% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ Proc: %ProcessName% ¦ PID: %ProcessId% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5038":"Path: %param1%","Microsoft-Windows-Security-Auditing/5136":"User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ ObjDN: %ObjectDN% ¦ AttrLDAPName: %AttributeLDAPDisplayName% ¦ OpType: %OperationType% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5140":"SrcUser: %SubjectUserName% ¦ ShareName: %ShareName% ¦ SharePath: %ShareLocalPath% ¦ SrcIP: %IpAddress% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5142":"User: %SubjectUserName% ¦ ShareName: %ShareName% ¦ ShareLocalPath: %ShareLocalPath% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5145":"SrcUser: %SubjectUserName% ¦ ShareName: %ShareName% ¦ SharePath: %ShareLocalPath% ¦ Path: %RelativeTargetName% ¦ SrcIP: %IpAddress% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Security-Auditing/5156":"Proc: %Application% ¦ SrcIP: %SourceAddress% ¦ SrcPort: %SourcePort% ¦ TgtIP: %DestAddress% ¦ TgtPort: %DestPort% ¦ Protocol: %Protocol% ¦ TgtMachineID: %RemoteMachineID% ¦ TgtSID: %RemoteUserID% ¦ PID: %ProcessID%","Microsoft-Windows-Security-Auditing/5157":"Proc: %Application% ¦ SrcIP: %SourceAddress% ¦ SrcPort: %SourcePort% ¦ TgtIP: %DestAddress% ¦ TgtPort: %DestPort% ¦ Protocol: %Protocol% ¦ TgtMachineID: %RemoteMachineID% ¦ TgtSID: %RemoteUserID% ¦ PID: %ProcessID%","Microsoft-Windows-Security-Auditing/5379":"PID: %ClientProcessId% ¦ SrcUser: %SubjectUserName% ¦ Tgt: %TargetName% ¦ CredsReturned: %CountOfCredentialsReturned% ¦ ReturnCode: %ReturnCode% ¦ LID: %SubjectLogonId% ¦ SrcSID: %SubjectUserSid%","Microsoft-Windows-Security-Auditing/6281":"Path: %param1%","Microsoft-Windows-Security-Auditing/6416":"DeviceDescrip: %DeviceDescription% ¦ DeviceID: %DeviceId% ¦ LocInfo: %LocationInformation% ¦ CompatibleIDs: %CompatibleIds% ¦ User: %SubjectUserName% ¦ SID: %SubjectUserSid% ¦ LID: %SubjectLogonId%","Microsoft-Windows-Sysmon/1":"Cmdline: %CommandLine% ¦ Proc: %Image% ¦ User: %User% ¦ ParentCmdline: %ParentCommandLine% ¦ LID: %LogonId% ¦ LGUID: %LogonGuid% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ ParentPID: %ParentProcessId% ¦ ParentPGUID: %ParentProcessGuid% ¦ Description: %Description% ¦ Product: %Product% ¦ Company: %Company% ¦ Hashes: %Hashes%","Microsoft-Windows-Sysmon/10":"SrcProc: %SourceImage% ¦ TgtProc: %TargetImage% ¦ SrcUser: %SourceUser% ¦ TgtUser: %TargetUser% ¦ Access: %GrantedAccess% ¦ SrcPID: %SourceProcessId% ¦ SrcPGUID: %SourceProcessGUID% ¦ TgtPID: %TargetProcessId% ¦ TgtPGUID: %TargetProcessGUID%","Microsoft-Windows-Sysmon/11":"Path: %TargetFilename% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/12":"EventType: %EventType% ¦ TgtObj: %TargetObject% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/13":"EventType: %EventType% ¦ TgtObj: %TargetObject%: %Details% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/14":"EventType: %EventType% ¦ TgtObj: %TargetObject%: %Details% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/15":"Path: %TargetFilename% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ Hash: %Hash%","Microsoft-Windows-Sysmon/16":"Config: %Configuration%","Microsoft-Windows-Sysmon/17":"Pipe: %PipeName% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/18":"Pipe: %PipeName% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/19":"Op: %Operation% ¦ Namespace: %EventNamespace% ¦ Name: %Name% ¦ Query: %query% ¦ User: %User%","Microsoft-Windows-Sysmon/2":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ CreationTime: %CreationUtcTime% ¦ PreviousTime: %PreviousCreationUtcTime% ¦ PID: %PID% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/20":"Op: %Operation% ¦ Type: %Type% ¦ Name: %Name% ¦ Tgt: %Destination% ¦ User: %User%","Microsoft-Windows-Sysmon/21":"Op: %Operation% ¦ Consumer: %Consumer% ¦ Filter: %Filter%","Microsoft-Windows-Sysmon/22":"Query: %QueryName% ¦ Result: %QueryResults% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/23":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/24":"Proc: %Image% ¦ User: %User% ¦ CliInfo: %ClientInfo% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/25":"Proc: %Image% ¦ Type: %Type% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/255":"ID: %ID% ¦ Description: %Description%","Microsoft-Windows-Sysmon/26":"Path: %TargetFilename% ¦ Proc: %Image% ¦ User: %User% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/3":"Initiated: %Initiated% ¦ Proto: %Protocol% ¦ SrcIP: %SourceIp% ¦ SrcPort: %SourcePort% ¦ SrcHost: %SourceHostname% ¦ TgtIP: %DestinationIp% ¦ TgtPort: %DestinationPort% ¦ TgtHost: %DestinationHostname% ¦ User: %User% ¦ Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/4":"State: %State% ¦ SysmonVer: %SysmonVersion% ¦ SchemaVer: %SchemaVersion%","Microsoft-Windows-Sysmon/5":"Proc: %Image% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-Sysmon/6":"Path: %ImageLoaded% ¦ Sig: %Signature% ¦ Signed: %Signed% ¦ SigStatus: %SignatureStatus% ¦ Hashes: %Hashes%","Microsoft-Windows-Sysmon/7":"Image: %ImageLoaded% ¦ Proc: %Image% ¦ Description: %Description% ¦ Product: %Product% ¦ Company: %Company% ¦ Signed: %Signed% ¦ Sig: %SignatureStatus% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid% ¦ Hash: %Hashes% ¦ OrigFilename: %OriginalFilename%","Microsoft-Windows-Sysmon/8":"SrcProc: %SourceImage% ¦ TgtProc: %TargetImage% ¦ SrcPID: %SourceProcessId% ¦ SrcPGUID: %SourceProcessGuid% ¦ TgtPID: %TargetProcessId% ¦ TgtPGUID: %TargetProcessGuid%","Microsoft-Windows-Sysmon/9":"Proc: %Image% ¦ Device: %Device% ¦ PID: %ProcessId% ¦ PGUID: %ProcessGuid%","Microsoft-Windows-WMI-Activity/5859":"Namespace: %OperationEssStartedNamespaceName% ¦ Query: %UserDataQuery% ¦ SID: %OperationEssStartedUser% ¦ PID: %OperationEssStartedProcessid% ¦ Provider: %OperationEssStartedProvider% ¦ PossibleCause: %OperationEssStartedPossibleCause%","Microsoft-Windows-Windows Defender/1013":"Time: %Timestamp% ¦ User: %User%","Microsoft-Windows-Windows Defender/1116":"Threat: %ThreatName% ¦ Severity: %SeverityName% ¦ Type: %CategoryName% ¦ User: %DetectionUser% ¦ Path: %Path% ¦ Proc: %WindowsDefenderProcessName%","Microsoft-Windows-Windows Firewall With Advanced Security/2003":"Profile: %Profiles% ¦ Type: %SettingType% ¦ Value: %SettingValueString% ¦ User: %ModifyingUser% ¦ App: %ModifyingApplication%","Microsoft-Windows-Windows Firewall With Advanced Security/2004":"RuleName: %RuleName% ¦ App: %ApplicationPath% ¦ ModifyingApp: %ModifyingApplication% ¦ User: %ModifyingUser% ¦ Svc: %ServiceName% ¦ Protocol: %Protocol% ¦ LocalAddr: %LocalAddresses% ¦ LocalPort: %LocalPorts% ¦ RemoteAddr: %RemoteAddresses% ¦ RemotePort: %RemotePorts% ¦ Action: %Action%","MsiInstaller/1034":"Product: %Data[1]% ¦ Ver: %Data[2]% ¦ Vendor: %Data[5]% ¦ Status: %Data[4]%","MsiInstaller/11724":"Product: %Data[1]%","PowerShellCore/4103":"Payload: %Payload%","PowerShellCore/4104":"ScriptBlock: %ScriptBlockText%","Service Control Manager/7031":"Svc: %param1% ¦ CrashCount: %param2% ¦ Action: %param5%","Service Control Manager/7045":"Svc: %ServiceName% ¦ Path: %ImagePath% ¦ Acct: %AccountName% ¦ StartType: %StartType%"}},"Sources":{"*/windows/application":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Application.evtx\")\n","channel":["Application"],"fields":["Channel","EventID"]},"*/windows/applocker":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n  ROOT + \"/Microsoft-Windows-AppLocker%4MSI and Script.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4EXE and DLL.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Deployment.evtx\",\n  ROOT + \"/Microsoft-Windows-AppLocker%4Packaged app-Execution.evtx\",\n])\n","channel":["Microsoft-Windows-AppLocker/MSI and Script","Microsoft-Windows-AppLocker/EXE and DLL","Microsoft-Windows-AppLocker/Packaged app-Deployment","Microsoft-Windows-AppLocker/Packaged app-Execution"],"fields":["Channel","EventID"]},"*/windows/appmodel-runtime":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppModel-Runtime%4Admin.evtx\")\n","channel":["Microsoft-Windows-AppModel-Runtime/Admin"],"fields":["Channel","EventID"]},"*/windows/appxdeployment-server":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n","channel":["Microsoft-Windows-AppxPackaging/Operational"],"fields":["Channel","EventID"]},"*/windows/appxpackaging-om":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-AppxPackaging%4Operational.evtx\")\n","channel":["Microsoft-Windows-AppxPackaging/Operational"],"fields":["Channel","EventID"]},"*/windows/bits-client":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Bits-Client%4Operational.evtx\")\n","channel":["Microsoft-Windows-Bits-Client/Operational"],"fields":["Channel","EventID","processPath","RemoteName"]},"*/windows/capi2":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-CAPI2/Operational\")\n","channel":["Microsoft-Windows-CAPI2/Operational"],"fields":["Channel","EventID"]},"*/windows/certificateservicesclient-lifecycle-system":{"query":"SELECT * FROM parse_evtx(filename=ROOT + \"/Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational\")\n","channel":["Microsoft-Windows-CertificateServicesClient-Lifecycle-System/Operational"],"fields":["Channel","EventID"]},"*/windows/codeintegrity-operational":{"query":"SELECT * FROM watch_evtx(accessor=\"file\",\n   filename=ROOT + \"/Microsoft-Windows-CodeIntegrity%4Operational.evtx\")\n","channel":["Microsoft-Windows-CodeIntegrity/Operational"],"fields":["Channel","EventID"]},"*/windows/diagnosis-scripted":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Diagnosis-Scripted%4Operational.evtx\")\n","channel":["Microsoft-Windows-Diagnosis-Scripted/Operational"],"fields":["Channel","EventID"]},"*/windows/dns-client":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DNS Client Events%4Operational.evtx\")\n","channel":["Microsoft-Windows-DNS Client Events/Operational"],"fields":["Channel","EventID"]},"*/windows/dns-server":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/DNS Server.evtx\")\n","channel":["DNS Server"],"fields":["Channel","EventID"]},"*/windows/dns-server-analytic":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DNS-Server%4Analytical.evtx\")\n","channel":["Microsoft-Windows-DNS-Server/Analytical"],"fields":["Channel","EventID"]},"*/windows/driver-framework":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-DriverFrameworks-UserMode%4Operational.evtx\")\n","channel":["Microsoft-Windows-DriverFrameworks-UserMode/Operational"],"fields":["Channel","EventID"]},"*/windows/firewall-as":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Firewall With Advanced Security%4Firewall.evtx\")\n","channel":["Microsoft-Windows-Windows Firewall With Advanced Security/Firewall"],"fields":["Channel","EventID"]},"*/windows/ldap_debug":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-LDAP-Client%4Debug.evtx\")\n","channel":["Microsoft-Windows-LDAP-Client/Debug"],"fields":["Channel","EventID"]},"*/windows/lsa-server":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-LSA%4Operational.evtx\")\n","channel":["Microsoft-Windows-LSA/Operational"],"fields":["Channel","EventID"]},"*/windows/microsoft-servicebus-client":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-ServiceBus-Client.evtx\")\n","channel":["Microsoft-ServiceBus-Client"],"fields":["Channel","EventID"]},"*/windows/msexchange-management":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/MSExchange Management.evtx\")\n","channel":["MSExchange Management"],"fields":["Channel","EventID"]},"*/windows/ntlm":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-NTLM%4Operational.evtx\")\n","channel":["Microsoft-Windows-NTLM/Operational"],"fields":["Channel","EventID"]},"*/windows/openssh":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/OpenSSH%4Operational.evtx\")\n","channel":["OpenSSH/Operational"],"fields":["Channel","EventID"]},"*/windows/powershell":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\",\n])\n","channel":["Microsoft-Windows-PowerShell/Operational","PowerShellCore/Operational"],"fields":["Channel","EventID","MessageNumber","MessageTotal","ScriptBlockText","ScriptBlockId","ContextInfo","UserData","Payload"]},"*/windows/powershell-classic":{"query":"SELECT *, EventData + dict(\n   Data=EventData.Data[2],\n   HostApplication=parse_string_with_regex(\n     regex=\"HostApplication=([^\\\\r\\\\n]+)\",\n     string=EventData.Data[2]).g1) AS EventData\nFROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\n","channel":["Windows PowerShell"],"fields":["Channel","EventID"]},"*/windows/printservice-admin":{},"*/windows/printservice-operational":{},"*/windows/security":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Security.evtx\")\n","channel":["Security"],"fields":["Channel","EventID"]},"*/windows/security-mitigations":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Security-Mitigations.evtx\")\n","channel":["Microsoft-Windows-Security-Mitigations"]},"*/windows/shell-core":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Shell-Core%4Operational.evtx\")\n","channel":["Microsoft-Windows-Shell-Core/Operational"],"fields":["Channel","EventID"]},"*/windows/smbclient-connectivity":{},"*/windows/smbclient-security":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-SmbClient%4Security.evtx\")\n","channel":["Microsoft-Windows-SmbClient/Security"],"fields":["Channel","EventID"]},"*/windows/sysmon":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\")\n","channel":["Microsoft-Windows-Sysmon/Operational"],"fields":["Channel","EventID","Provider_Name","Imphash","sha1","sha256","md5","ImagePath","TargetParentImage"]},"*/windows/system":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/System.evtx\")\n","channel":["System"],"fields":["Channel","EventID","Caption"]},"*/windows/taskscheduler":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-TaskScheduler%4Operational.evtx\")\n","channel":["Microsoft-Windows-TaskScheduler/Operational"],"fields":["Channel","EventID"]},"*/windows/terminalservices-localsessionmanager":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx\")\n","channel":["Microsoft-Windows-TerminalServices-LocalSessionManager/Operational"],"fields":["Channel","EventID","Address"]},"*/windows/vhdmp":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-VHDMP%4Operational.evtx\")\n","channel":["Microsoft-Windows-VHDMP/Operational"],"fields":["EventID","VhdType","Channel"]},"*/windows/windefend":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n","channel":["Microsoft-Windows-Windows Defender/Operational"],"fields":["Channel","EventID","SeverityID","ThreatName"]},"*/windows/wmi":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-WMI-Activity%4Operational.evtx\")\n","channel":["Microsoft-Windows-WMI-Activity/Operational"],"fields":["Channel","EventID"]},"process_creation/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/System.evtx\"\n])\nWHERE System.EventID.Value = 1 OR System.EventID.Value = 4688\n","fields":["Channel","EventID"]},"ps_classic_provider_start/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\nWHERE System.EventID.Value = 600\n","fields":["Channel","EventID"]},"ps_classic_start/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Windows PowerShell.evtx\")\nWHERE System.EventID.Value = 400\n","fields":["Channel","EventID"]},"ps_module/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\"\n])\nWHERE System.EventID.Value = 4103\n","fields":["Channel","EventID"]},"ps_script/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-PowerShell%4Operational.evtx\",\n   ROOT + \"/PowerShellCore%4Operational.evtx\"\n])\nWHERE System.EventID.Value = 4104\n","fields":["Channel","EventID"]},"registry_add/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE System.EventID.Value = 12 OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"registry_event/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE System.EventID.Value IN (12, 13, 14) OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"registry_set/windows/*":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=[\n   ROOT + \"/Microsoft-Windows-Sysmon%4Operational.evtx\",\n   ROOT + \"/Security.evtx\"\n])\nWHERE System.EventID.Value = 13 OR System.EventID.Value = 4657\n","fields":["Channel","EventID"]},"antivirus/windows/windefend":{"query":"SELECT * FROM watch_evtx(accessor='file', filename=ROOT + \"/Microsoft-Windows-Windows Defender%4Operational.evtx\")\n","channel":["Microsoft-Windows-Windows Defender/Operational"],"fields":["Channel","EventID"]}},"ExportTemplate":"export: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET MandatoryLabelLookup \u003c= dict(\n      `S-1-16-0`= 'UNTRUSTED',\n      `S-1-16-4096`= 'LOW_INTEGRITY',\n      `S-1-16-8192`= 'MEDIUM_INTEGRITY',\n      `S-1-16-8448`= 'MEDIUM_HIGH_INTEGRITY',\n      `S-1-16-12288`= 'HIGH_INTEGRITY',\n      `S-1-16-16384`= 'SYSTEM_INTEGRITY',\n      `S-1-16-20480`= 'PROTECTED_PROCESS')\n\n  LET TokenElevationTypeLookup \u003c= dict(\n      `%%1936`= 'FULL_TOKEN',\n      `%%1937`= 'ELEVATED_TOKEN',\n      `%%1938`= 'LIMITED_TOKEN')\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET WindowsKernelFile_EIDLookup \u003c= dict(\n       `10`=\"NameCreate\", `11`=\"NameDelete\", `12`=\"FileOpen\",\n       `19`=\"Rename\", `27`=\"RenamePath\",`30`=\"CreateNewFile\")\n\n  LET WindowsKernelFile_Keyword \u003c= 0x1490\n\n  LET WindowsKernelProcess_EIDLookup \u003c= dict(\n    `1`=\"ProcessStart\", `2`=\"ProcessStop\",\n    `5`=\"ImageLoad\", `6`=\"ImageUnload\")\n\n  LET WindowsKernelProcess_Keyword \u003c= 0x50\n\n  LET WindowsKernelRegistry_EIDLookup \u003c= dict(\n    `2`=\"OpenKey\", `1`=\"CreateKey\", `5`=\"SetValueKey\",\n    `6`=\"DeleteValueKey\", `3`=\"DeleteKey\")\n\n  -- SetValueKey | DeleteValueKey | CreateKey | OpenKey | DeleteKey = 0x100 | 0x200 | 0x1000 | 0x2000 | 0x4000\n  LET WindowsKernelRegistry_Keyword \u003c= 0x7300\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n","QueryTemplate":"sources:\n- query: |\n   LET Result = SELECT timestamp(epoch=System.TimeCreated.SystemTime) AS Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= Rules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details='''{{.Base64DefaultDetailsQuery}}''',\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details, _Event\n     FROM Result\n   })\n","ImportConfigs":["config/base_doc.yaml"]},"Windows.Sigma.BaseEvents.CaptureTestSet":{"Name":"Windows.Sigma.BaseEvents.CaptureTestSet","Preamble":"name: Windows.Sigma.BaseEvents.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.Base. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    choices:\n    {{- range .ImportedLogSources }}\n    - \"{{ .Name }}\"\n    {{- end }}\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\nimports:\n  - Windows.Sigma.BaseEvents\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- name: MatchingSources\n  query: |\n    SELECT _key AS SourceName\n    FROM items(item=LogSources)\n    WHERE SourceName =~ LogSourceFilter\n      AND if(condition=SelectedLogSources,\n             then=SourceName in SelectedLogSources, else=TRUE)\n\n- name: Data\n  query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM query(query=Query, inherit=TRUE)\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","ImportConfigs":["config/windows_base_events.yaml"]},"Windows.Sigma.BaseEvents.ReplayTestSet":{"Name":"Windows.Sigma.BaseEvents.ReplayTestSet","Preamble":"name: Windows.Sigma.Events.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.BaseEvents\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT timestamp(\n           epoch=System.TimeCreated.SystemTime) AS Timestamp,\n       System.Computer AS Computer,\n       System.Channel AS Channel,\n       System.EventID.Value AS EID,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       System.EventRecordID AS RecordID,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","ImportConfigs":["config/windows_base_events.yaml"]},"Windows.Sigma.BaseVQL":{"Name":"Windows.Sigma.BaseVQL","Description":"# Windows Base VQL Sigma Model\n\nThis model is designed for triage of dead disk, or file based live\nanalysis using VQL rules. The rules that use this model will be\nevaluated once on all events.\n\nAfter all relevant rules are evaluated, the collection is complete.\n\nRules that utilize this model may include a `vql` section which may\ncontain a VQL lambda to dictates how the event is generated. This\nallows the rule itself to generate all relevant fields.\n\nFor example:\n\n```yaml\nvql: |\nx=\u003edict(\n  Timestamp=timestamp(epoch=now()),\n  EventData=dict(\n    Files=SearchFiles(Glob='C:/Users/*/AppData/Roaming/rclone/rclone.conf')\n  ))\n```\n\nThe following utility functions are defined:\n\n* `SearchFiles(Glob)`: Allows searching for files with a\n  glob. Returns the file size as well as the first 100 bytes.\n\n* `SearchRegistryKeys(Glob)`: Allows searching for registry keys -\n  returns a dict with key/value pairs from the registry.\n","Preamble":"name: Windows.Sigma.BaseVQL\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Sigma Forensic Triage on Windows.\n\n  NOTE: This artifact does not include any rules. You can launch it\n  with rules provided to the SigmaRules parameter or call it from\n  another artifact with a set of rules passed to the SigmaRules\n  parameter.\n\n  This artifact was built on {{ .Time }}\n\ntype: CLIENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      This table are rules that will be excluded by Title Regex\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: DateAfter\n    description: \"search for events after this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: DateBefore\n    description: \"search for events before this date. YYYY-MM-DDTmm:hh:ss Z\"\n    type: timestamp\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n\n  - name: NTFS_CACHE_TIME\n    type: int\n    description: How often to flush the NTFS cache. (Default is never).\n    default: \"1000000\"\n","FieldMappings":{"EventData":"x=\u003ex.EventData","Hash":"x=\u003ehash(path=x.EventData.Image)","Image":"x=\u003ex.EventData.Image","Mtime":"x=\u003ex.EventData.Mtime","Name":"x=\u003ex.EventData.Name","OSPath":"x=\u003ex.EventData.OSPath","Size":"x=\u003ex.EventData.Size","Timestamp":"x=\u003etimestamp(epoch=now())"},"DefaultDetails":{"Query":"x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.EventID.Value])\n      ) || x.Message || x.UserData || x.EventData\n","Lookup":{"X":"X"}},"Sources":{"vql/windows/*":{"query":"SELECT timestamp(epoch=now()) AS Timestamp,\n  dict(\n    Computer=Hostname,\n    Channel=\"VQL Evaluation\",\n    TimeCreated=dict(SystemTime=now())\n  ) AS System,\n  dict() AS EventData\nFROM scope()\n","fields":["Timestamp","EventData","System"],"description":"This log source emits a single event. All rules using the log\nsource will receive this event, where they can run arbitrary VQL\nqueries to build the event themselves.\n\nThis is most useful for rules that want to generate their own\nevent data.\n"},"filesystem/windows/glob":{"query":"SELECT Mtime AS Timestamp,\n       dict(Computer=Hostname, Channel='Velociraptor') AS System,\n       dict(Name=Name,\n            OSPath=OSPath,\n            Size=Size,\n            Mtime=Mtime) AS EventData\nFROM glob(globs='C:/**')\n","fields":["Name","OSPath","Size","Mtime"],"description":"This log source searches for all files on the drive - it takes a\nlong time but allows rules to check for presence of a particular\nfilename.\n"},"*/windows/schtasks":{"query":"SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\nFROM Artifact.Windows.System.TaskScheduler()\n","fields":["Arguments","Comhandler","CommandLine","Image","UserId"],"description":"Enumerates All Scheduled tasks"},"*/windows/services":{"query":"SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *,\n    PathName AS CommandLine, ServiceDll AS Image,\n    UserAccount AS User\nFROM Artifact.Windows.System.Services()\n","fields":["CommandLine","Created","DisplayName","ExitCode","Image","Name","ServiceType","StartMode","State","Status","User"]},"persistence/windows/services":{"query":"SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *,\n    PathName AS CommandLine, ServiceDll AS Image,\n    UserAccount AS User\nFROM Artifact.Windows.System.Services()\n","fields":["CommandLine","Created","DisplayName","ExitCode","Image","Name","ServiceType","StartMode","State","Status","User"]},"process_creation/vql/execution":{"query":"SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\nFROM Artifact.Windows.Analysis.EvidenceOfExecution()\n","fields":["LastExecution","Name","NumberOfExecutions","User"]},"webserver/windows/*":{"query":"SELECT dict(Computer=Hostname, Channel='Velociraptor') AS System, *\nFROM Artifact.Windows.Applications.IISLogs()\n"},"process_creation/windows/pslist":{"query":"SELECT CreateTime AS Timestamp,\n       dict(Computer=Hostname, Channel='Velociraptor') AS System,\n       dict(CreateTime=CreateTime, CommandLine= CommandLine,\n            Image=Exe, MD5=H.MD5, SHA256=H.SHA256, SHA1=H.SHA1,\n            ParentCommandLine=P.CommandLine,\n            ParentImage=P.Exe,\n            ParentMD5=PH.MD5,\n            ParentSHA1=PH.SHA1,\n            ParentSHA256=PH.SHA256,\n            GrandParentCommandLine=GP.CommandLine,\n            GrandParentImage=GP.Exe,\n            User=Username\n       ) AS EventData\nFROM foreach(row={\n      SELECT StartTime AS CreateTime,\n          Pid, CommandLine, Exe,\n          process_tracker_get(id=Ppid).Data AS P,\n          if(condition=process_tracker_get(id=Ppid).Data.Exe,\n             then=hash(path=process_tracker_get(id=Ppid).Data.Exe)) AS PH,\n          process_tracker_get(id=process_tracker_get(id=Ppid).ParentId).Data AS GP,\n          if(condition=Exe, then=hash(path=Exe)) AS H,\n          Username\n      FROM process_tracker_pslist()\n})\n","fields":["CommandLine","GrandParentCommandLine","GrandParentImage","Image","MD5","md5","ParentCommandLine","ParentImage","ParentMD5","SHA1","sha1","SHA256","sha256","User"]},"image_load/vql/pslist":{"query":"SELECT CreateTime AS Timestamp,\n       dict(Computer=Hostname, Channel='Velociraptor') AS System,\n       dict(CommandLine=CommandLine,\n            Image=Exe,\n            User=Username,\n            MD5=H.MD5,\n            SHA1=H.SHA1,\n            SHA256=H.SHA256,\n            ModuleName=ModuleName,\n            ModulePath=ModulePath,\n            ModuleMD5=MH.MD5,\n            ModuleSHA1=MH.SHA1,\n            ModuleSHA256=MH.SHA256,\n            GrandParentImage=GP.Exe,\n            GrandParentCommandLine=GP.CommandLine,\n            ParentCommandLine=P.CommandLine,\n            ParentImage=P.Exe,\n            ParentMD5=PH.MD5,\n            ParentSHA1=PH.SHA1,\n            ParentSHA256=PH.SHA256) AS EventData\nFROM foreach(\n  row={\n      SELECT StartTime AS CreateTime,\n          Pid, CommandLine, Exe,\n          process_tracker_get(id=Ppid).Data AS P,\n          if(condition=Exe, then=hash(path=Exe)) AS H,\n          Username\n      FROM process_tracker_pslist()},\n  query={\n      SELECT CreateTime, Exe, CommandLine, P, H, Username,\n          if(condition=P.Exe, then=hash(path=P.Exe), else=P.Exe) AS PH,\n          ModuleName, ExePath AS ModulePath,\n          if(condition=ExePath, then=hash(path=ExePath), else=ExePath) AS MH,\n          process_tracker_get(id=P.Ppid).Data AS GP\n      FROM modules(pid=int(int=Pid))}\n)\n","fields":["CommandLine","GrandParentCommandLine","GrandParentImage","Image","ModuleMD5","ModuleName","ModulePath","ModuleSHA1","ModuleSHA256","ParentCommandLine","ParentImage","ParentMD5","ParentSHA1","ParentSHA256","MD5","SHA1","SHA256","User"]},"network_connection/windows/netstat":{"query":"SELECT pt.CreateTime AS Timestamp,\n       dict(Computer=Hostname, Channel='Velociraptor') AS System,\n       dict(CommandLine=CommandLine,\n            Status= Status,\n            Image=Image,\n            LocalIP= LocalIP,\n            LocalPort= LocalPort,\n            RemoteIP= RemoteIP,\n            RemotePort = RemotePort,\n            ParentImage= ParentImage,\n            Protocol= Protocol) AS EventData\n\nFROM foreach(\n    row={SELECT * , process_tracker_get(id=Pid) AS pt FROM netstat()},\n    query={\n        SELECT Timestamp,\n          Laddr.IP as LocalIP, Laddr.Port AS LocalPort,\n          Raddr.IP AS RemoteIP, Raddr.Port AS RemotePort,\n          Pid, TypeString AS Protocol, Status, pt.Data.Exe AS Image,\n          pt.Data.CommandLine as CommandLine,\n          process_tracker_get(id=pt.Data.Ppid).Data.Exe AS ParentImage,\n          pt\n        FROM scope()})\n","fields":["CommandLine","Image","LocalIP","LocalPort","RemoteIP","RemotePort","ParentImage","Protocol","Status"]},"*/windows/wmi":{"query":"SELECT\n  timestamp(epoch=now()) AS Timestamp,\n  dict(\n    Computer=Hostname,\n    Channel=\"Velociraptor\",\n    TimeCreated=dict(SystemTime=now())\n  ) AS System,\n  dict(\n    Namespace=Namespace,\n    FilterDetails=FilterDetails,\n    ConsumerDetails=ConsumerDetails\n  ) AS EventData\nFROM Artifact.Windows.Persistence.PermanentWMIEvents(\n  AllRootNamespaces=false\n)\n","fields":["Timestamp","System","EventData"],"description":"Exposes permanent WMI subscriptions (Filter + Consumer) in a Sigma-friendly format.\nHelps detect uptime-based persistence and consumers that launch processes.\n"},"forensics/windows/prefetch":{"query":"SELECT\n  ModificationTime AS Timestamp,\n  dict(Computer=Hostname, Channel='Velociraptor') AS System,\n  dict(\n    Name=PrefetchFileName,      \n    Image=Executable,           \n    OSPath=OSPath,              \n    Directory=dirname(path=OSPath),\n    Mtime=ModificationTime,     \n    RunCount=RunCount,\n    LastRunTimes=LastRunTimes,  \n    PrefetchHash=string(Hash)   \n  ) AS EventData\nFROM Artifact.Windows.Forensics.Prefetch()\n","fields":["Name","Image","OSPath","Directory","Mtime","RunCount","LastRunTimes","PrefetchHash"],"description":"Parse Windows Prefetch files (dead-disk or live). Emits one row per PF entry with useful triage fields for Sigma.\n"},"process_creation/windows/attack_prefetch":{"query":"SELECT\n  modified AS Timestamp,\n  dict(Computer=Hostname, Channel='Velociraptor') AS System,\n  dict(\n    Name=Name,                              \n    Mtime=modified,                         \n    ModTime=ModTime,                        \n    Image=get(item=split(string=Name, sep='-'), member=0)  \n  ) AS EventData\nFROM Artifact.Windows.Attack.Prefetch()\n","fields":["Name","Image","Mtime","ModTime"],"description":"Lightweight Prefetch view used by Windows.Attack.Prefetch. Helpful for quick presence checks of executables that created PF entries.\n"},"forensics/windows/usn":{"query":"SELECT\n  Timestamp,\n  dict(Computer=Hostname, Channel='Velociraptor') AS System,\n  dict(\n    OSPath=OSPath,        \n    FileName=Filename,    \n    Reason=Reason,       \n    MFTId=MFTId,\n    ParentMFTId=ParentMFTId\n  ) AS EventData\nFROM Artifact.Windows.Forensics.Usn()\n","fields":["OSPath","FileName","Reason","MFTId","ParentMFTId"],"description":"USN Journal parser output normalized for Sigma. Emits filesystem change records with path, filename, reason flags and MFT identifiers.\n"}},"ExportTemplate":"export: |\n  LET X = scope()\n\n  LET DateAfterTime \u003c= X.DateAfter || timestamp(epoch=\"1600-01-01\")\n  LET DateBeforeTime \u003c= X.DateBefore || timestamp(epoch=\"2200-01-01\")\n\n  LET ExcludeRegex \u003c= if(condition=X.RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=X.RuleStatus || \"All Rules\")\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=X.RuleLevel || \"All\")\n\n  // Helpers for VQL rules\n  LET FetchKeyValues(OSPath) = to_dict(item={\n      SELECT Name AS _key, Data.value AS _value\n      FROM glob(globs=\"*\", accessor=\"registry\", root=OSPath)\n  })\n\n  LET SearchFiles(Glob) =  SELECT OSPath, Size,\n      read_file(filename=OSPath, length=100) AS Data\n    FROM glob(globs=Glob, accessor=\"auto\")\n\n  LET SearchRegistryKeys(Glob) = to_dict(item={\n      SELECT OSPath.String AS _key, Data.value AS _value\n      FROM glob(globs=Glob, accessor=\"registry\")\n    })\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET GetCallChain(Pid) = join(array=process_tracker_callchain(id=Pid).Data.Name, sep=\" -\u003e \")\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n","QueryTemplate":"sources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         System.EventRecordID AS RecordID,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         _Match, *\n   FROM sigma(\n     rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=RuleFilterLambda,\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID,\n            Level, Title, RecordID, Details,\n            _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","ImportConfigs":["config/base_doc.yaml"]},"Windows.Sigma.ETWBase":{"Name":"Windows.Sigma.ETWBase","Description":"# Windows Base ETW Model\n\nThis model is designed to follow ETW event sources.\n\nETW events are provided by various ETW Providers in the Windows\nKernel. These events can provide security critical information which\ncan be detected using Sigma Rules.\n\nThis is a real time monitoring profile which allows live monitoring\nof Windows systems using Sigma rules.\n","Preamble":"name: Windows.Sigma.ETWBase\ndescription: |\n  This artifact builds the basic set of log sources and field\n  mappings used for Event driven Sigma rules on Windows.\n\n  This artifact was built on {{ .Time }}\n\ntype: CLIENT_EVENT\n\nparameters:\n  - name: Debug\n    type: bool\n    description: Enable full debug trace\n\n  - name: RuleLevel\n    type: choices\n    default: All\n    choices:\n      - \"Critical\"\n      - \"Critical and High\"\n      - \"Critical, High, and Medium\"\n      - \"All\"\n\n  - name: RuleStatus\n    type: choices\n    default: All Rules\n    choices:\n      - Stable\n      - Stable and Experimental\n      - Stable and Test\n      - All Rules\n\n  - name: RuleTitleFilter\n    type: regex\n    default: .\n    description: Use this to filter only some rules to match\n\n  - name: RuleExclusions\n    type: csv\n    description: |\n      Some rules in the Hayabusa set are extremely noisy, so they\n      are disabled by default.\n    default: |\n      RuleTitleRegex,Reason\n      noisy,All rules marked noisy should be disabled by default.\n\n  - name: SigmaRules\n    description: If provided we use these rules instead of the built in set.\n","FieldMappings":{"Channel":"x=\u003ex.System.Channel","CommandLine":"x=\u003ex.EventData.ProcInfo.CommandLine","Computer":"x=\u003ex.System.Computer","EventType":"x=\u003ex.System.EventType","FileName":"x=\u003ex.EventData.FileName || x.EventData.OpenPath","KeyName":"x=\u003ex.EventData.KeyName","Offset":"x=\u003eint(int=x.EventData.Offset)","ProcessExe":"x=\u003ex.EventData.ProcInfo.Exe","ProcessName":"x=\u003ex.EventData.ProcInfo.Name","RegistryPath":"x=\u003ex.EventData.RegistryPath","Username":"x=\u003ex.EventData.ProcInfo.Username"},"DefaultDetails":{"Query":"x=\u003eget(item=DefaultDetails,\n       member=format(format=\"%v/%v\",\n          args=[x.System.Provider.Name, x.System.ID])\n      ) || x.Message || x.UserData || x.EventData\n"},"Sources":{"etw/windows/kernel":{"query":"SELECT * FROM delay(\n  query={\n    SELECT timestamp(epoch=now()) AS Timestamp,\n           System + dict(Channel=\"NT-Kernel-Logger\",\n                Computer=Hostname,\n                EventType=System.KernelEventType,\n                EventID=dict(Value=System.ID)) AS System,\n           System.KernelEventType AS EventType,\n           EventData + dict(\n              ProcInfo=GetProcInfo(PID=System.ProcessID)\n           ) AS EventData\n    FROM watch_etw(guid='{9E814AAD-3204-11D2-9A82-006008A86939}',\n                   capture_state=TRUE,\n                   level=5,\n                   description=\"NT-Kernel-Logger\",\n                   kernel_tracer_type=[\"registry\", \"process\", \"network\", \"driver\", \"file\"])\n    WHERE EventType\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-File"],"fields":["Channel","EventID"],"description":"Events from the `NT Kernel Logger` provider\n\nThe `NT Kernel Logger` ETW source is a special purpose ETW\nprovider that reports details about network/registry and file.\n\nThis provider enriches events with process information from the\nprocess tracker.\n\nThis provider is special: Enabling this provider implicitly\ntriggers many other ETW providers such as File, Process,\nRegistry and Network monitoring. Velociraptor's ETW subsystem\nrecognizes the `Kernel Logger` provider automatically and\nperforms additional processing:\n\n- Resolves full files paths from kernel space (uses device\n  notation) to regular filesystem paths (e.g. `C:\\Windows`).\n\n- Collects rundown events to determine the initial system\n  state. This allows Velociraptor to resolve file and registry\n  paths from events that refer to kernel object addresses.\n\nFor these reasons it is preferable to use this provider over\nthe `Microsoft-Windows-Kernel-File` or\n`Microsoft-Windows-Kernel-Registry` providers.\n","samples":[{"name":"WriteFile","json":"config/samples/Windows-Kernel-Logger-WriteFile.json"},{"name":"ReadFile","json":"config/samples/Windows-Kernel-Logger-ReadFile.json"},{"name":"CloseFile","json":"config/samples/Windows-Kernel-Logger-CloseFile.json"},{"name":"ReleaseFile","json":"config/samples/Windows-Kernel-Logger-ReleaseFile.json"},{"name":"CreateFile","json":"config/samples/Windows-Kernel-Logger-CreateFile.json"},{"name":"RegQueryValue","json":"config/samples/Windows-Kernel-Logger-RegQueryValue.json"},{"name":"RegOpenKey","json":"config/samples/Windows-Kernel-Logger-RegOpenKey.json"},{"name":"RegCloseKey","json":"config/samples/Windows-Kernel-Logger-RegCloseKey.json"},{"name":"RegCreateKey","json":"config/samples/Windows-Kernel-Logger-RegCreateKey.json"},{"name":"SendTCPv4","json":"config/samples/Windows-Kernel-Logger-SendTCPv4.json"},{"name":"RecvTCPv4","json":"config/samples/Windows-Kernel-Logger-RecvTCPv4.json"},{"name":"CreateProcess","json":"config/samples/Windows-Kernel-Logger-CreateProcess.json"}]},"etw/windows/file":{"query":"SELECT timestamp(epoch=now()) AS Timestamp,\n       System + dict(Channel=\"Microsoft-Windows-Kernel-File\",\n            Computer=Hostname,\n            EventType=get(item=WindowsKernelFile_EIDLookup,\n                          field=str(str=System.ID)),\n            EventID=dict(Value=System.ID)) AS System,\n       EventData + dict(\n           ProcInfo=GetProcInfo(PID=System.ProcessID)\n       ) AS EventData\nFROM delay(query={\n   SELECT * FROM watch_etw(\n      guid='{edd08927-9cc4-4e65-b970-c2560fb5c289}',\n      description=\"Microsoft-Windows-Kernel-File\",\n      any=WindowsKernelFile_Keyword)\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-File"],"fields":["Channel","EventID"],"description":"Log source based on the `Microsoft-Windows-Kernel-File` provider.\n\nSee `etw/windows/kernel` for a better ETW provider.\n","samples":[{"name":"FileOpen Event","json":"config/samples/Windows-Kernel-File-Sample-FileOpen.json"},{"name":"CreateNewFile Event","json":"config/samples/Windows-Kernel-File-Sample-CreateNewFile.json"},{"name":"NameCreate Event","json":"config/samples/Windows-Kernel-File-Sample-NameCreate.json"}]},"etw/windows/registry":{"query":"SELECT timestamp(epoch=now()) AS Timestamp,\n       System + dict(Channel=\"Microsoft-Windows-Kernel-Registry\",\n            Computer=Hostname,\n            EventType=get(item=WindowsKernelRegistry_EIDLookup,\n                          field=str(str=System.ID)),\n            EventID=dict(Value=System.ID)) AS System,\n       EventData + dict(\n           ProcInfo=GetProcInfo(PID=System.ProcessID)\n       ) AS EventData\nFROM delay(query={\n   SELECT * FROM watch_etw(\n      guid='{70eb4f03-c1de-4f73-a051-33d13d5413bd}',\n      capture_state=TRUE,\n      description=\"Microsoft-Windows-Kernel-Registry\",\n      any=WindowsKernelRegistry_Keyword)\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Registry"],"fields":["Channel","EventID"],"description":"Log source based on the `Microsoft-Windows-Kernel-Registry` provider.\n\nSee `etw/windows/kernel` for a better ETW provider.\n","samples":[{"name":"CreateKey Event","json":"config/samples/Windows-Kernel-Registry-Sample-CreateKey.json"},{"name":"DeleteKey Event","json":"config/samples/Windows-Kernel-Registry-Sample-DeleteKey.json"},{"name":"DeleteValueKey Event","json":"config/samples/Windows-Kernel-Registry-Sample-DeleteValueKey.json"},{"name":"OpenKey Event","json":"config/samples/Windows-Kernel-Registry-Sample-OpenKey.json"},{"name":"SetValueKey Event","json":"config/samples/Windows-Kernel-Registry-Sample-SetValueKey.json"}]},"etw/windows/process":{"query":"SELECT timestamp(epoch=now()) AS Timestamp,\n       System + dict(Channel=\"Microsoft-Windows-Kernel-Process\",\n            Computer=Hostname,\n            EventType=get(item=WindowsKernelProcess_EIDLookup,\n                          field=str(str=System.ID)),\n            EventID=dict(Value=System.ID)) AS System,\n       EventData + dict(\n          ProcInfo=GetProcInfo(PID=System.ProcessID)\n       ) AS EventData\nFROM delay(query={\n   SELECT * FROM watch_etw(\n      guid='{22fb2cd6-0e7b-422b-a0c7-2fad1fd0e716}',\n      description=\"Microsoft-Windows-Kernel-Process\",\n      any=WindowsKernelProcess_Keyword)\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Process"],"fields":["Channel","EventID"],"description":"Log source based on the `Microsoft-Windows-Kernel-Registry` provider\n\nSee `etw/windows/kernel` for a better ETW provider.\n"},"etw/windows/sysmon":{"query":"SELECT *\nFROM delay(query={\n   SELECT System.TimeStamp AS Timestamp,\n    System + dict(\n       EventId=System.ID,\n       Computer=Hostname,\n       Channel=\"Microsoft-Windows-Sysmon/Operational\") AS System,\n    EventData + dict(ProcInfo=process_tracker_get(\n       id=System.ProcessID).Data) AS EventData\n  FROM watch_etw(\n      guid='{5770385f-c22a-43e0-bf4c-06f5698ffbd9}',\n      description=\"Microsoft-Windows-Sysmon/Operational\")\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Process"],"fields":["Channel","EventID"],"description":"Log source to read Sysmon events via ETW\n\nThis is better than reading the log files since it does not use\nthe event log service.\n"},"etw/windows/etw":{"query":"SELECT *\nFROM delay(query={\n   SELECT System.TimeStamp AS Timestamp,\n    System + dict(\n       EventId=System.ID,\n       Computer=Hostname,\n       Channel=\"Microsoft-Windows-Kernel-EventTracing\") AS System,\n    EventData + dict(ProcInfo=process_tracker_get(\n       id=System.ProcessID).Data) AS EventData\n  FROM watch_etw(\n      guid='{B675EC37-BDB6-4648-BC92-F3FDC74D3CA2}', any=0x30,\n      description=\"Microsoft-Windows-Kernel-EventTracing\")\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Process"],"fields":["Channel","EventID"],"description":"Log source to monitor ETW system states\n"},"etw/windows/wmi":{"query":"SELECT *\nFROM delay(query={\n   SELECT System.TimeStamp AS Timestamp,\n    System + dict(\n       EventId=System.ID,\n       Computer=Hostname,\n       Channel=\"Microsoft-Windows-WMI-Activity\") AS System,\n    EventData + dict(ProcInfo=process_tracker_get(\n       id=System.ProcessID).Data) AS EventData\n  FROM watch_etw(\n      guid='{1418EF04-B0B4-4623-BF7E-D74AB47BBDAA}', any=0x30,\n      description=\"Microsoft-Windows-WMI-Activity\")\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Process"],"fields":["Channel","EventID"],"description":"Log source to monitor WMI activity\n"},"etw/windows/dns":{"query":"SELECT *\nFROM delay(query={\n   SELECT System.TimeStamp AS Timestamp,\n    System + dict(\n       EventId=System.ID,\n       Computer=Hostname,\n       Channel=\"Microsoft-Windows-DNS-Client\") AS System,\n    EventData + dict(ProcInfo=process_tracker_get(\n       id=System.ProcessID).Data) AS EventData\n  FROM watch_etw(\n      guid='{1C95126E-7EEA-49A9-A3FE-A378B03DDB4D}', any=0x30,\n      description=\"Microsoft-Windows-DNS-Client\")\n}, delay=1)\n","channel":["Microsoft-Windows-Kernel-Process"],"fields":["Channel","EventID"],"description":"Log source to monitor DNS Lookups\n\nSee full description [here](https://github.com/repnz/etw-providers-docs/blob/master/Manifests-Win10-18990/Microsoft-Windows-DNS-Client.xml)\n"}},"ExportTemplate":"export: |\n  -- Add some defaults\n  LET X = scope()\n  LET RuleLevel \u003c= X.RuleLevel || \"All\"\n  LET RuleStatus \u003c= X.RuleStatus || \"All Rules\"\n  LET RuleTitleFilter \u003c= X.RuleTitleFilter || \".\"\n  LET RuleExclusions \u003c= X.RuleExclusions || NULL\n\n  LET ExcludeRegex \u003c= if(condition=RuleExclusions,\n       then=join(array=RuleExclusions.RuleTitleRegex, sep=\"|\"),\n       else=\"XXXXXXX\")\n\n  LET RuleStatusRegex \u003c= get(item=dict(\n       `Stable`=\"stable\",\n       `Stable and Experimental`=\"stable|experimental\",\n       `Stable and Test`=\"stable|test\",\n       `All Rules`=\".\"), member=RuleStatus)\n\n  LET RuleLevelRegex \u003c= get(item=dict(\n       `Critical`=\"critical\",\n       `Critical and High`=\"critical|high\",\n       `Critical, High, and Medium`=\"critical|high|medium|default\",\n       `All`=\".\"), member=RuleLevel)\n\n  LET GetValue(OSPath) = stat(filename=OSPath, accessor=\"registry\").Data.value\n  LET Hostname \u003c= dict(H={ SELECT Hostname FROM info()}).H[0].Hostname\n\n  LET WindowsKernelFile_EIDLookup \u003c= dict(\n       `10`=\"NameCreate\", `11`=\"NameDelete\", `12`=\"FileOpen\",\n       `19`=\"Rename\", `27`=\"RenamePath\",`30`=\"CreateNewFile\")\n\n  LET WindowsKernelFile_Keyword \u003c= 0x1490\n\n  LET WindowsKernelProcess_EIDLookup \u003c= dict(\n    `1`=\"ProcessStart\", `2`=\"ProcessStop\",\n    `5`=\"ImageLoad\", `6`=\"ImageUnload\")\n\n  LET WindowsKernelProcess_Keyword \u003c= 0x50\n\n  LET WindowsKernelRegistry_EIDLookup \u003c= dict(\n    `2`=\"OpenKey\", `1`=\"CreateKey\", `5`=\"SetValueKey\",\n    `6`=\"DeleteValueKey\", `3`=\"DeleteKey\")\n\n  -- SetValueKey | DeleteValueKey | CreateKey | OpenKey | DeleteKey = 0x100 | 0x200 | 0x1000 | 0x2000 | 0x4000\n  LET WindowsKernelRegistry_Keyword \u003c= 0x7300\n\n  LET PublisherGlob \u003c= pathspec(\n    Path='''HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Publishers''',\n    path_type=\"registry\")\n\n  LET GUIDLookup(GUID) = SELECT Data.value AS Provider\n    FROM stat(accessor=\"registry\", filename=PublisherGlob + (\"/\" + GUID + \"/@\"))\n\n  LET GetProcInfo(PID) = to_dict(item={\n    SELECT * FROM items(item=process_tracker_get(id=PID).Data)\n       WHERE _key =~ \"Name|CommandLine|CreateTime|Exe|Cwd|Username\"\n    })\n\n  {{ if .LogSources }}\n  LET LogSources \u003c= sigma_log_sources(\n  {{ range .LogSources }}\n    `{{ .Name }}`={\n{{ Indent .Query 5 }}\n    },\n  {{- end -}}\n  `velociraptor/info/*`={ SELECT * FROM info() })\n  {{ end }}\n\n  LET FieldMapping \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64FieldMapping}}\")))\n\n  LET DefaultDetails \u003c= parse_json(data=gunzip(string=base64decode(string=\"{{.Base64DefaultDetailsLookup}}\")))\n\n  LET DefaultDetailsLambda = '''{{.Base64DefaultDetailsQuery}}'''\n  LET RuleFilterLambda = '''x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex'''\n","QueryTemplate":"sources:\n- query: |\n   LET Result = SELECT Timestamp,\n         System.Computer AS Computer,\n         System.Channel AS Channel,\n         System.EventID.Value AS EID,\n         System.EventType AS EventType,\n         _Rule.Level AS Level,\n         _Rule.Title AS Title,\n         Details,\n         dict(System=System,\n              EventData=X.EventData || X.UserData,\n              Message=X.Message) AS _Event,\n         *\n   FROM sigma(\n     rules=split(string= SigmaRules, sep=\"\\n---+\\r?\\n\"),\n     log_sources= LogSources, debug=Debug,\n     default_details=DefaultDetailsLambda,\n     rule_filter=\"x=\u003ex.Level =~ RuleLevelRegex AND x.Status =~ RuleStatusRegex AND x.Title =~ RuleTitleFilter AND NOT x.Title =~ ExcludeRegex\",\n     field_mapping= FieldMapping)\n\n   SELECT * FROM if(condition=Debug, then={\n     SELECT * FROM Result\n   }, else={\n     SELECT Timestamp, Computer, Channel , EID, EventType,\n            Level, Title, Details, X._Correlations || _Event AS _Event,\n            X.Enrichment AS Enrichment\n     FROM Result\n   })\n","ImportConfigs":["config/base_doc.yaml"]},"Windows.Sigma.ETWBase.CaptureTestSet":{"Name":"Windows.Sigma.ETWBase.CaptureTestSet","Preamble":"name: Windows.Sigma.ETWBase.CaptureTestSet\ndescription: |\n  This artifact captures a test set of the log sources defined by\n  Windows.Sigma.ETWBase. It is used to acquire a dataset for the\n  `SigmaStudio` notebook.\n\ntype: CLIENT_EVENT\nparameters:\n  - name: LogSourceFilter\n    description: Only capture log sources that match this regex.\n    type: regex\n    default: .\n\n  - name: SelectedLogSources\n    description: Set to capture only those log sources.\n    type: multichoice\n    default: '[]'\n    choices:\n    {{- range .ImportedLogSources }}\n    - \"{{ .Name }}\"\n    {{- end }}\n\n  - name: EventRegex\n    description: Only capture events that match this regex (the event is converted to JSON first).\n    type: regex\n    default: .\n\nimports:\n  - Windows.Sigma.ETWBase\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    LET X = SELECT * FROM foreach(row={\n      SELECT _key AS SourceName, _value AS Query\n      FROM items(item=LogSources)\n      WHERE SourceName =~ LogSourceFilter\n        AND if(condition=SelectedLogSources,\n               then=SourceName in SelectedLogSources, else=TRUE)\n    }, query={\n      SELECT * FROM foreach(row={\n        SELECT * FROM items(item={\n          SELECT * FROM query(query=Query, inherit=TRUE)\n        })\n        WHERE _value =~ EventRegex\n      }, column=\"_value\")\n    }, async=TRUE)\n\n    SELECT *\n    FROM if(condition= version(function=\"sigma_log_sources\") \u003e 1, then=X,\n      else={\n        SELECT log(message=\"Artifact requires at least Velociraptor 0.74\")\n        FROM scope()\n    })\n","ImportConfigs":["config/windows_etw_base.yaml"]},"Windows.Sigma.ETWBase.ReplayTestSet":{"Name":"Windows.Sigma.ETWBase.ReplayTestSet","Preamble":"name: Windows.Sigma.ETWBase.ReplayTestSet\ndescription: |\n  This artifact replays a previously captured test set into the rules.\n\ntype: CLIENT\nparameters:\n - name: JSONDump\n   description: A path to the JSON dump of the test set\n   default: C:\\path\\to\\file.json\n\n - name: Debug\n   description: Enable this to match all rules (even if they did not match) in order to see what detections matched.\n   type: bool\n\n - name: SigmaRules\n   description: Sigma Rules to test\n\nimports:\n  - Windows.Sigma.ETWBase\n","DefaultDetails":{},"Sources":{},"QueryTemplate":"sources:\n- query: |\n    // Feed all the json rows to the log sources.\n    LET AllRows = SELECT * FROM parse_jsonl(filename=JSONDump)\n\n    LET TestingLogSourceDict \u003c= to_dict(item={\n      SELECT _key, AllRows AS _value\n      FROM items(item=LogSources)\n    })\n\n    // Build the log sources automatically.\n    LET TestingLogSources \u003c= sigma_log_sources(`**`=TestingLogSourceDict)\n\n    // Apply the Sigma Rules on the samples.\n    LET Result = SELECT Timestamp,\n       System.Computer AS Computer,\n       System.Channel AS Channel,\n       System.EventID.Value AS EID,\n       System.EventType AS EventType,\n       _Rule.Level AS Level,\n       _Rule.Title AS Title,\n       Details,\n       dict(System=System,\n            EventData=X.EventData || X.UserData,\n            Message=X.Message) AS _Event,\n       X._Match || X._Correlations AS Match, *\n    FROM sigma(\n       rules=split(string=SigmaRules, sep=\"\\n---+\\r?\\n\"),\n       log_sources= TestingLogSources, debug=Debug,\n       default_details=DefaultDetailsLambda,\n       field_mapping= FieldMapping)\n\n    SELECT * FROM if(condition=Debug, then={\n       SELECT * FROM Result\n    }, else={\n       SELECT Timestamp, Computer, Channel , EID, EventType,\n          Level, Title, Details, X._Correlations[:5] || _Event AS _Event,\n          X.Enrichment AS Enrichment\n       FROM Result\n    })\n","ImportConfigs":["config/windows_etw_base.yaml"]}}