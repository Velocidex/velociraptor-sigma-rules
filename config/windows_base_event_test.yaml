Name: Windows.Sigma.BaseEvents.CaptureTestSet
ImportConfigs:
  - config/windows_base_events.yaml

Preamble: |
  name: Windows.Sigma.BaseEvents.CaptureTestSet
  description: |
    This artifact captures a test set of the log sources defined by
    Windows.Sigma.Base. It is used to acquire a dataset for the
    `SigmaStudio` notebook.

  type: CLIENT_EVENT
  parameters:
    - name: LogSourceFilter
      description: Only capture log sources that match this regex.
      type: regex
      default: .

    - name: SelectedLogSources
      description: Set to capture only those log sources.
      type: multichoice
      choices:
      {{- range .ImportedLogSources }}
      - "{{ .Name }}"
      {{- end }}

    - name: EventRegex
      description: Only capture events that match this regex (the event is converted to JSON first).
      type: regex
      default: .

    - name: RuleLevel
      type: choices
      default: All
      choices:
        - "Critical"
        - "Critical and High"
        - "Critical, High, and Medium"
        - "All"

    - name: RuleStatus
      type: choices
      default: All Rules
      choices:
        - Stable
        - Stable and Experimental
        - Stable and Test
        - All Rules

    - name: RuleTitleFilter
      type: regex
      default: .
      description: Use this to filter only some rules to match

    - name: RuleExclusions
      type: csv
      description: |
        Some rules in the Hayabusa set are extremely noisy, so they
        are disabled by default.
      default: |
        RuleTitleRegex,Reason
        noisy,All rules marked noisy should be disabled by default.

  imports:
    - Windows.Sigma.BaseEvents

QueryTemplate: |
   sources:
   - name: MatchingSources
     query: |
       SELECT _key AS SourceName
       FROM items(item=LogSources)
       WHERE SourceName =~ LogSourceFilter
         AND if(condition=SelectedLogSources,
                then=SourceName in SelectedLogSources, else=TRUE)

   - name: Data
     query: |
       LET X = SELECT * FROM foreach(row={
         SELECT _key AS SourceName, _value AS Query
         FROM items(item=LogSources)
         WHERE SourceName =~ LogSourceFilter
           AND if(condition=SelectedLogSources,
                  then=SourceName in SelectedLogSources, else=TRUE)
       }, query={
         SELECT * FROM query(query=Query, inherit=TRUE)
       }, async=TRUE)

       SELECT *
       FROM if(condition= version(function="sigma_log_sources") > 1, then=X,
         else={
           SELECT log(message="Artifact requires at least Velociraptor 0.74")
           FROM scope()
       })
